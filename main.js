"use strict";var ci=Object.defineProperty;var In=a=>{throw TypeError(a)};var oi=(a,t,e)=>t in a?ci(a,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):a[t]=e;var ue=(a,t,e)=>oi(a,typeof t!="symbol"?t+"":t,e),Us=(a,t,e)=>t.has(a)||In("Cannot "+e);var j=(a,t,e)=>(Us(a,t,"read from private field"),e?e.call(a):t.get(a)),Ve=(a,t,e)=>t.has(a)?In("Cannot add the same private member more than once"):t instanceof WeakSet?t.add(a):t.set(a,e),Ze=(a,t,e,s)=>(Us(a,t,"write to private field"),s?s.call(a,e):t.set(a,e),e),Qa=(a,t,e)=>(Us(a,t,"access private method"),e);const A=require("obsidian"),gt=2,ln=4,Es=8,gs=16,ea=32,Ua=64,Zn=128,vt=256,Ss=512,Ne=1024,ft=2048,va=4096,Mt=8192,ka=16384,cn=32768,on=65536,zn=1<<17,ui=1<<18,un=1<<19,dn=1<<20,Xs=1<<21,vn=1<<22,ma=1<<23,Xt=Symbol("$state"),er=Symbol("legacy props"),di=Symbol(""),fn=new class extends Error{constructor(){super(...arguments);ue(this,"name","StaleReactionError");ue(this,"message","The reaction that called `getAbortSignal()` was re-run or destroyed")}},hn=3,Oa=8,Ln=!1;var $a=Array.isArray,vi=Array.prototype.indexOf,gn=Array.from,Ds=Object.defineProperty,Ea=Object.getOwnPropertyDescriptor,tr=Object.getOwnPropertyDescriptors,fi=Object.prototype,hi=Array.prototype,pn=Object.getPrototypeOf,Fn=Object.isExtensible;function gi(a){return a()}function Ts(a){for(var t=0;t<a.length;t++)a[t]()}function pi(){var a,t,e=new Promise((s,n)=>{a=s,t=n});return{promise:e,resolve:a,reject:t}}function ar(a){return a===this.v}function mi(a,t){return a!=a?t==t:a!==t||a!==null&&typeof a=="object"||typeof a=="function"}function sr(a){return!mi(a,this.v)}function wi(){throw new Error("https://svelte.dev/e/await_outside_boundary")}function mn(a){throw new Error("https://svelte.dev/e/lifecycle_outside_component")}function _i(){throw new Error("https://svelte.dev/e/async_derived_orphan")}function yi(a){throw new Error("https://svelte.dev/e/effect_in_teardown")}function bi(){throw new Error("https://svelte.dev/e/effect_in_unowned_derived")}function ki(a){throw new Error("https://svelte.dev/e/effect_orphan")}function Ci(){throw new Error("https://svelte.dev/e/effect_update_depth_exceeded")}function xi(){throw new Error("https://svelte.dev/e/hydration_failed")}function Si(a){throw new Error("https://svelte.dev/e/props_invalid_value")}function Di(){throw new Error("https://svelte.dev/e/state_descriptors_fixed")}function Ti(){throw new Error("https://svelte.dev/e/state_prototype_fixed")}function Ai(){throw new Error("https://svelte.dev/e/state_unsafe_mutation")}let ja=!1,Mi=!1;function Ni(){ja=!0}const Rs=1,Is=2,nr=4,Pi=8,Ei=16,Ri=1,Ii=2,zi=4,Li=8,Fi=16,Oi=1,Bi=2,rr="[",wn="[!",_n="]",wa={},Fe=Symbol(),qi="http://www.w3.org/1999/xhtml";let ye=null;function As(a){ye=a}function Ge(a,t=!1,e){ye={p:ye,c:null,e:null,s:a,x:null,l:ja&&!t?{s:null,u:null,$:[]}:null}}function Je(a){var t=ye,e=t.e;if(e!==null){t.e=null;for(var s of e)Dr(s)}return a!==void 0&&(t.x=a),ye=t.p,a??{}}function Ka(){return!ja||ye!==null&&ye.l===null}function ps(a){console.warn("https://svelte.dev/e/hydration_mismatch")}function Hi(){console.warn("https://svelte.dev/e/select_multiple_invalid_value")}let ne=!1;function Yt(a){ne=a}let de;function ht(a){if(a===null)throw ps(),wa;return de=a}function Ba(){return ht(Ht(de))}function u(a){if(ne){if(Ht(de)!==null)throw ps(),wa;de=a}}function dt(a=1){if(ne){for(var t=a,e=de;t--;)e=Ht(e);de=e}}function Qs(){for(var a=0,t=de;;){if(t.nodeType===Oa){var e=t.data;if(e===_n){if(a===0)return t;a-=1}else(e===rr||e===wn)&&(a+=1)}var s=Ht(t);t.remove(),t=s}}function ir(a){if(!a||a.nodeType!==Oa)throw ps(),wa;return a.data}function Na(a){if(typeof a!="object"||a===null||Xt in a)return a;const t=pn(a);if(t!==fi&&t!==hi)return a;var e=new Map,s=$a(a),n=sa(0),r=ya,l=c=>{if(ya===r)return c();var o=se,d=ya;qt(null),Un(r);var f=c();return qt(o),Un(d),f};return s&&e.set("length",sa(a.length)),new Proxy(a,{defineProperty(c,o,d){(!("value"in d)||d.configurable===!1||d.enumerable===!1||d.writable===!1)&&Di();var f=e.get(o);return f===void 0?f=l(()=>{var h=sa(d.value);return e.set(o,h),h}):b(f,d.value,!0),!0},deleteProperty(c,o){var d=e.get(o);if(d===void 0){if(o in c){const _=l(()=>sa(Fe));e.set(o,_),$s(n)}}else{if(s&&typeof o=="string"){var f=e.get("length"),h=Number(o);Number.isInteger(h)&&h<f.v&&b(f,h)}b(d,Fe),$s(n)}return!0},get(c,o,d){var w;if(o===Xt)return a;var f=e.get(o),h=o in c;if(f===void 0&&(!h||(w=Ea(c,o))!=null&&w.writable)&&(f=l(()=>{var m=Na(h?c[o]:Fe),E=sa(m);return E}),e.set(o,f)),f!==void 0){var _=i(f);return _===Fe?void 0:_}return Reflect.get(c,o,d)},getOwnPropertyDescriptor(c,o){var d=Reflect.getOwnPropertyDescriptor(c,o);if(d&&"value"in d){var f=e.get(o);f&&(d.value=i(f))}else if(d===void 0){var h=e.get(o),_=h==null?void 0:h.v;if(h!==void 0&&_!==Fe)return{enumerable:!0,configurable:!0,value:_,writable:!0}}return d},has(c,o){var _;if(o===Xt)return!0;var d=e.get(o),f=d!==void 0&&d.v!==Fe||Reflect.has(c,o);if(d!==void 0||te!==null&&(!f||(_=Ea(c,o))!=null&&_.writable)){d===void 0&&(d=l(()=>{var w=f?Na(c[o]):Fe,m=sa(w);return m}),e.set(o,d));var h=i(d);if(h===Fe)return!1}return f},set(c,o,d,f){var M;var h=e.get(o),_=o in c;if(s&&o==="length")for(var w=d;w<h.v;w+=1){var m=e.get(w+"");m!==void 0?b(m,Fe):w in c&&(m=l(()=>sa(Fe)),e.set(w+"",m))}if(h===void 0)(!_||(M=Ea(c,o))!=null&&M.writable)&&(h=l(()=>sa(void 0)),b(h,Na(d)),e.set(o,h));else{_=h.v!==Fe;var E=l(()=>Na(d));b(h,E)}var D=Reflect.getOwnPropertyDescriptor(c,o);if(D!=null&&D.set&&D.set.call(f,d),!_){if(s&&typeof o=="string"){var g=e.get("length"),y=Number(o);Number.isInteger(y)&&y>=g.v&&b(g,y+1)}$s(n)}return!0},ownKeys(c){i(n);var o=Reflect.ownKeys(c).filter(h=>{var _=e.get(h);return _===void 0||_.v!==Fe});for(var[d,f]of e)f.v!==Fe&&!(d in c)&&o.push(d);return o},setPrototypeOf(){Ti()}})}function On(a){try{if(a!==null&&typeof a=="object"&&Xt in a)return a[Xt]}catch{}return a}function lr(a,t){return Object.is(On(a),On(t))}var Bn,cr,or,ur;function Zs(){if(Bn===void 0){Bn=window,cr=/Firefox/.test(navigator.userAgent);var a=Element.prototype,t=Node.prototype,e=Text.prototype;or=Ea(t,"firstChild").get,ur=Ea(t,"nextSibling").get,Fn(a)&&(a.__click=void 0,a.__className=void 0,a.__attributes=null,a.__style=void 0,a.__e=void 0),Fn(e)&&(e.__t=void 0)}}function Bt(a=""){return document.createTextNode(a)}function xt(a){return or.call(a)}function Ht(a){return ur.call(a)}function v(a,t){if(!ne)return xt(a);var e=xt(de);if(e===null)e=de.appendChild(Bt());else if(t&&e.nodeType!==hn){var s=Bt();return e==null||e.before(s),ht(s),s}return ht(e),e}function Ct(a,t){if(!ne){var e=xt(a);return e instanceof Comment&&e.data===""?Ht(e):e}return de}function p(a,t=1,e=!1){let s=ne?de:a;for(var n;t--;)n=s,s=Ht(s);if(!ne)return s;if(e&&(s==null?void 0:s.nodeType)!==hn){var r=Bt();return s===null?n==null||n.after(r):s.before(r),ht(r),r}return ht(s),s}function yn(a){a.textContent=""}function dr(){return!1}const Vi=new WeakMap;function Ui(a){var t=te;if(t===null)return se.f|=ma,a;if(t.f&cn)bn(a,t);else{if(!(t.f&Zn))throw!t.parent&&a instanceof Error&&vr(a),a;t.b.error(a)}}function bn(a,t){for(;t!==null;){if(t.f&Zn)try{t.b.error(a);return}catch{}t=t.parent}throw a instanceof Error&&vr(a),a}function vr(a){const t=Vi.get(a);t&&(Ds(a,"message",{value:t.message}),Ds(a,"stack",{value:t.stack}))}const $i=typeof requestIdleCallback>"u"?a=>setTimeout(a,1):requestIdleCallback;let rs=[],is=[];function fr(){var a=rs;rs=[],Ts(a)}function hr(){var a=is;is=[],Ts(a)}function ls(a){rs.length===0&&queueMicrotask(fr),rs.push(a)}function ji(a){is.length===0&&$i(hr),is.push(a)}function Ki(){rs.length>0&&fr(),is.length>0&&hr()}function Gi(){for(var a=te.b;a!==null&&!a.has_pending_snippet();)a=a.parent;return a===null&&wi(),a}function zs(a){var t=gt|ft,e=se!==null&&se.f&gt?se:null;return te===null||e!==null&&e.f&vt?t|=vt:te.f|=un,{ctx:ye,deps:null,effects:null,equals:ar,f:t,fn:a,reactions:null,rv:0,v:Fe,wv:0,parent:e??te,ac:null}}function Ji(a,t){let e=te;e===null&&_i();var s=e.b,n=void 0,r=us(Fe),l=null,c=!se;return ll(()=>{try{var o=a()}catch(w){o=Promise.reject(w)}var d=()=>o;n=(l==null?void 0:l.then(d,d))??Promise.resolve(o),l=n;var f=Me,h=s.pending;c&&(s.update_pending_count(1),h||f.increment());const _=(w,m=void 0)=>{l=null,h||f.activate(),m?m!==fn&&(r.f|=ma,qa(r,m)):(r.f&ma&&(r.f^=ma),qa(r,w)),c&&(s.update_pending_count(-1),h||f.decrement()),mr()};if(n.then(_,w=>_(null,w||"unknown")),f)return()=>{queueMicrotask(()=>f.neuter())}}),new Promise(o=>{function d(f){function h(){f===n?o(r):d(n)}f.then(h,h)}d(n)})}function zt(a){const t=zs(a);return t.equals=sr,t}function gr(a){var t=a.effects;if(t!==null){a.effects=null;for(var e=0;e<t.length;e+=1)Qt(t[e])}}function Wi(a){for(var t=a.parent;t!==null;){if(!(t.f&gt))return t;t=t.parent}return null}function kn(a){var t,e=te;da(Wi(a));try{gr(a),t=Cr(a)}finally{da(e)}return t}function pr(a){var t=kn(a);if(a.equals(t)||(a.v=t,a.wv=br()),!Ca)if(ca!==null)ca.set(a,a.v);else{var e=(oa||a.f&vt)&&a.deps!==null?va:Ne;Ie(a,e)}}function Yi(a,t,e){const s=Ka()?zs:zt;if(t.length===0){e(a.map(s));return}var n=Me,r=te,l=Xi(),c=Gi();Promise.all(t.map(o=>Ji(o))).then(o=>{n==null||n.activate(),l();try{e([...a.map(s),...o])}catch(d){r.f&ka||bn(d,r)}n==null||n.deactivate(),mr()}).catch(o=>{c.error(o)})}function Xi(){var a=te,t=se,e=ye;return function(){da(a),qt(t),As(e)}}function mr(){da(null),qt(null),As(null)}const Cs=new Set;let Me=null,ca=null;let Pa=[],cs=null,en=!1;var vs,za,La,ia,fs,hs,ga,Fa,la,Jt,pa,Zt,wr,_r,tn;const En=class En{constructor(){Ve(this,Zt);Ve(this,vs,new Map);Ve(this,za,new Map);Ve(this,La,new Set);Ve(this,ia,0);Ve(this,fs,null);Ve(this,hs,!1);Ve(this,ga,[]);Ve(this,Fa,[]);Ve(this,la,[]);Ve(this,Jt,[]);Ve(this,pa,[]);ue(this,"skipped_effects",new Set)}capture(t,e){j(this,za).has(t)||j(this,za).set(t,e),j(this,vs).set(t,t.v)}activate(){Me=this}deactivate(){Me=null}neuter(){Ze(this,hs,!0)}flush(){Pa.length>0?this.flush_effects():Qa(this,Zt,tn).call(this),Me===this&&(j(this,ia)===0&&Cs.delete(this),Me=null)}flush_effects(){var t=Ra;en=!0;try{var e=0;for(Hn(!0);Pa.length>0;)e++>1e3&&Qi(),Qa(this,Zt,wr).call(this,Pa),_a.clear()}finally{en=!1,Hn(t),cs=null}}increment(){Ze(this,ia,j(this,ia)+1)}decrement(){if(Ze(this,ia,j(this,ia)-1),j(this,ia)===0){for(const t of j(this,la))Ie(t,ft),ua(t);for(const t of j(this,Jt))Ie(t,ft),ua(t);for(const t of j(this,pa))Ie(t,ft),ua(t);Ze(this,la,[]),Ze(this,Jt,[]),this.flush()}}add_callback(t){j(this,La).add(t)}settled(){return(j(this,fs)??Ze(this,fs,pi())).promise}static ensure(){if(Me===null){const t=Me=new En;Cs.add(Me),queueMicrotask(()=>{Me===t&&t.flush()})}return Me}};vs=new WeakMap,za=new WeakMap,La=new WeakMap,ia=new WeakMap,fs=new WeakMap,hs=new WeakMap,ga=new WeakMap,Fa=new WeakMap,la=new WeakMap,Jt=new WeakMap,pa=new WeakMap,Zt=new WeakSet,wr=function(t){var r;Pa=[];var e=null;if(Cs.size>1){e=new Map,ca=new Map;for(const[l,c]of j(this,vs))e.set(l,{v:l.v,wv:l.wv}),l.v=c;for(const l of Cs)if(l!==this)for(const[c,o]of j(l,za))e.has(c)||(e.set(c,{v:c.v,wv:c.wv}),c.v=o)}for(const l of t)Qa(this,Zt,_r).call(this,l);if(j(this,ga).length===0&&j(this,ia)===0){var s=j(this,la),n=j(this,Jt);Ze(this,la,[]),Ze(this,Jt,[]),Ze(this,pa,[]),Qa(this,Zt,tn).call(this),qn(s),qn(n),(r=j(this,fs))==null||r.resolve()}else{for(const l of j(this,la))Ie(l,Ne);for(const l of j(this,Jt))Ie(l,Ne);for(const l of j(this,pa))Ie(l,Ne)}if(e){for(const[l,{v:c,wv:o}]of e)l.wv<=o&&(l.v=c);ca=null}for(const l of j(this,ga))Ia(l);for(const l of j(this,Fa))Ia(l);Ze(this,ga,[]),Ze(this,Fa,[])},_r=function(t){var f;t.f^=Ne;for(var e=t.first;e!==null;){var s=e.f,n=(s&(ea|Ua))!==0,r=n&&(s&Ne)!==0,l=r||(s&Mt)!==0||this.skipped_effects.has(e);if(!l&&e.fn!==null){if(n)e.f^=Ne;else if(s&ln)j(this,Jt).push(e);else if(ms(e))if(s&vn){var c=(f=e.b)!=null&&f.pending?j(this,Fa):j(this,ga);c.push(e)}else e.f&gs&&j(this,pa).push(e),Ia(e);var o=e.first;if(o!==null){e=o;continue}}var d=e.parent;for(e=e.next;e===null&&d!==null;)e=d.next,d=d.parent}},tn=function(){if(!j(this,hs))for(const t of j(this,La))t();j(this,La).clear()};let os=En;function K(a){var t;const e=os.ensure();for(;;){if(Ki(),Pa.length===0)return e===Me&&e.flush(),cs=null,t;e.flush_effects()}}function Qi(){try{Ci()}catch(a){if(cs!==null)bn(a,cs);else throw a}}function qn(a){var t=a.length;if(t!==0){for(var e=0;e<t;e++){var s=a[e];if(!(s.f&(ka|Mt))&&ms(s)){var n=Ms;if(Ia(s),s.deps===null&&s.first===null&&s.nodes_start===null&&(s.teardown===null?Er(s):s.fn=null),Ms>n&&s.f&dn)break}}for(;e<t;e+=1)ua(a[e])}}function ua(a){for(var t=cs=a;t.parent!==null;){t=t.parent;var e=t.f;if(en&&t===te&&e&gs)return;if(e&(Ua|ea)){if(!(e&Ne))return;t.f^=Ne}}Pa.push(t)}const _a=new Map;function us(a,t){var e={f:0,v:a,reactions:null,equals:ar,rv:0,wv:0};return e}function sa(a,t){const e=us(a);return Zi(e),e}function $(a,t=!1,e=!0){var n;const s=us(a);return t||(s.equals=sr),ja&&e&&ye!==null&&ye.l!==null&&((n=ye.l).s??(n.s=[])).push(s),s}function Aa(a,t){return b(a,x(()=>i(a))),t}function b(a,t,e=!1){se!==null&&(!Ft||se.f&zn)&&Ka()&&se.f&(gt|gs|vn|zn)&&!(Ke!=null&&Ke.includes(a))&&Ai();let s=e?Na(t):t;return qa(a,s)}function qa(a,t){if(!a.equals(t)){var e=a.v;Ca?_a.set(a,t):_a.set(a,e),a.v=t,os.ensure().capture(a,e),a.f&gt&&(a.f&ft&&kn(a),Ie(a,a.f&vt?va:Ne)),a.wv=br(),yr(a,ft),Ka()&&te!==null&&te.f&Ne&&!(te.f&(ea|Ua))&&(bt===null?el([a]):bt.push(a))}return t}function Za(a,t=1){var e=i(a),s=t===1?e++:e--;return b(a,e),s}function $s(a){b(a,a.v+1)}function yr(a,t){var e=a.reactions;if(e!==null)for(var s=Ka(),n=e.length,r=0;r<n;r++){var l=e[r],c=l.f;c&ft||!s&&l===te||(Ie(l,t),c&(Ne|vt)&&(c&gt?yr(l,va):ua(l)))}}let Ra=!1;function Hn(a){Ra=a}let Ca=!1;function Vn(a){Ca=a}let se=null,Ft=!1;function qt(a){se=a}let te=null;function da(a){te=a}let Ke=null;function Zi(a){se!==null&&(Ke===null?Ke=[a]:Ke.push(a))}let Ue=null,ut=0,bt=null;function el(a){bt=a}let Ms=1,ds=0,ya=ds;function Un(a){ya=a}let oa=!1,ha=null;function br(){return++Ms}function ms(a){var h;var t=a.f;if(t&ft)return!0;if(t&va){var e=a.deps,s=(t&vt)!==0;if(e!==null){var n,r,l=(t&Ss)!==0,c=s&&te!==null&&!oa,o=e.length;if((l||c)&&(te===null||!(te.f&ka))){var d=a,f=d.parent;for(n=0;n<o;n++)r=e[n],(l||!((h=r==null?void 0:r.reactions)!=null&&h.includes(d)))&&(r.reactions??(r.reactions=[])).push(d);l&&(d.f^=Ss),c&&f!==null&&!(f.f&vt)&&(d.f^=vt)}for(n=0;n<o;n++)if(r=e[n],ms(r)&&pr(r),r.wv>a.wv)return!0}(!s||te!==null&&!oa)&&Ie(a,Ne)}return!1}function kr(a,t,e=!0){var s=a.reactions;if(s!==null&&!(Ke!=null&&Ke.includes(a)))for(var n=0;n<s.length;n++){var r=s[n];r.f&gt?kr(r,t,!1):t===r&&(e?Ie(r,ft):r.f&Ne&&Ie(r,va),ua(r))}}function Cr(a){var m;var t=Ue,e=ut,s=bt,n=se,r=oa,l=Ke,c=ye,o=Ft,d=ya,f=a.f;Ue=null,ut=0,bt=null,oa=(f&vt)!==0&&(Ft||!Ra||se===null),se=f&(ea|Ua)?null:a,Ke=null,As(a.ctx),Ft=!1,ya=++ds,a.ac!==null&&(a.ac.abort(fn),a.ac=null);try{a.f|=Xs;var h=(0,a.fn)(),_=a.deps;if(Ue!==null){var w;if(Ns(a,ut),_!==null&&ut>0)for(_.length=ut+Ue.length,w=0;w<Ue.length;w++)_[ut+w]=Ue[w];else a.deps=_=Ue;if(!oa||f&gt&&a.reactions!==null)for(w=ut;w<_.length;w++)((m=_[w]).reactions??(m.reactions=[])).push(a)}else _!==null&&ut<_.length&&(Ns(a,ut),_.length=ut);if(Ka()&&bt!==null&&!Ft&&_!==null&&!(a.f&(gt|va|ft)))for(w=0;w<bt.length;w++)kr(bt[w],a);return n!==null&&n!==a&&(ds++,bt!==null&&(s===null?s=bt:s.push(...bt))),a.f&ma&&(a.f^=ma),h}catch(E){return Ui(E)}finally{a.f^=Xs,Ue=t,ut=e,bt=s,se=n,oa=r,Ke=l,As(c),Ft=o,ya=d}}function tl(a,t){let e=t.reactions;if(e!==null){var s=vi.call(e,a);if(s!==-1){var n=e.length-1;n===0?e=t.reactions=null:(e[s]=e[n],e.pop())}}e===null&&t.f&gt&&(Ue===null||!Ue.includes(t))&&(Ie(t,va),t.f&(vt|Ss)||(t.f^=Ss),gr(t),Ns(t,0))}function Ns(a,t){var e=a.deps;if(e!==null)for(var s=t;s<e.length;s++)tl(a,e[s])}function Ia(a){var t=a.f;if(!(t&ka)){Ie(a,Ne);var e=te,s=Ra;te=a,Ra=!0;try{t&gs?cl(a):Nr(a),Mr(a);var n=Cr(a);a.teardown=typeof n=="function"?n:null,a.wv=Ms;var r;Ln&&Mi&&a.f&ft&&a.deps}finally{Ra=s,te=e}}}function i(a){var t=a.f,e=(t&gt)!==0;if(ha!==null&&ha.add(a),se!==null&&!Ft){var s=te!==null&&(te.f&ka)!==0;if(!s&&!(Ke!=null&&Ke.includes(a))){var n=se.deps;if(se.f&Xs)a.rv<ds&&(a.rv=ds,Ue===null&&n!==null&&n[ut]===a?ut++:Ue===null?Ue=[a]:(!oa||!Ue.includes(a))&&Ue.push(a));else{(se.deps??(se.deps=[])).push(a);var r=a.reactions;r===null?a.reactions=[se]:r.includes(se)||r.push(se)}}}else if(e&&a.deps===null&&a.effects===null){var l=a,c=l.parent;c!==null&&!(c.f&vt)&&(l.f^=vt)}if(Ca){if(_a.has(a))return _a.get(a);if(e){l=a;var o=l.v;return(l.f&Ne||xr(l))&&(o=kn(l)),_a.set(l,o),o}}else if(e){if(l=a,ca!=null&&ca.has(l))return ca.get(l);ms(l)&&pr(l)}if(a.f&ma)throw a.v;return a.v}function xr(a){if(a.v===Fe)return!0;if(a.deps===null)return!1;for(const t of a.deps)if(_a.has(t)||t.f&gt&&xr(t))return!0;return!1}function al(a){var t=ha;ha=new Set;var e=ha,s;try{if(x(a),t!==null)for(s of ha)t.add(s)}finally{ha=t}return e}function na(a){var t=al(()=>x(a));for(var e of t)qa(e,e.v)}function x(a){var t=Ft;try{return Ft=!0,a()}finally{Ft=t}}const sl=-7169;function Ie(a,t){a.f=a.f&sl|t}function he(a){if(!(typeof a!="object"||!a||a instanceof EventTarget)){if(Xt in a)an(a);else if(!Array.isArray(a))for(let t in a){const e=a[t];typeof e=="object"&&e&&Xt in e&&an(e)}}}function an(a,t=new Set){if(typeof a=="object"&&a!==null&&!(a instanceof EventTarget)&&!t.has(a)){t.add(a),a instanceof Date&&a.getTime();for(let s in a)try{an(a[s],t)}catch{}const e=pn(a);if(e!==Object.prototype&&e!==Array.prototype&&e!==Map.prototype&&e!==Set.prototype&&e!==Date.prototype){const s=tr(e);for(let n in s){const r=s[n].get;if(r)try{r.call(a)}catch{}}}}}function Sr(a){te===null&&se===null&&ki(),se!==null&&se.f&vt&&te===null&&bi(),Ca&&yi()}function nl(a,t){var e=t.last;e===null?t.last=t.first=a:(e.next=a,a.prev=e,t.last=a)}function Vt(a,t,e,s=!0){var n=te;n!==null&&n.f&Mt&&(a|=Mt);var r={ctx:ye,deps:null,nodes_start:null,nodes_end:null,f:a|ft,first:null,fn:t,last:null,next:null,parent:n,b:n&&n.b,prev:null,teardown:null,transitions:null,wv:0,ac:null};if(e)try{Ia(r),r.f|=cn}catch(o){throw Qt(r),o}else t!==null&&ua(r);var l=e&&r.deps===null&&r.first===null&&r.nodes_start===null&&r.teardown===null&&(r.f&un)===0;if(!l&&s&&(n!==null&&nl(r,n),se!==null&&se.f&gt)){var c=se;(c.effects??(c.effects=[])).push(r)}return r}function Cn(a){const t=Vt(Es,null,!1);return Ie(t,Ne),t.teardown=a,t}function sn(a){Sr();var t=te.f,e=!se&&(t&ea)!==0&&(t&cn)===0;if(e){var s=ye;(s.e??(s.e=[])).push(a)}else return Dr(a)}function Dr(a){return Vt(ln|dn,a,!1)}function rl(a){return Sr(),Vt(Es|dn,a,!0)}function il(a){os.ensure();const t=Vt(Ua,a,!0);return(e={})=>new Promise(s=>{e.outro?xn(t,()=>{Qt(t),s(void 0)}):(Qt(t),s(void 0))})}function Tr(a){return Vt(ln,a,!1)}function Oe(a,t){var e=ye,s={effect:null,ran:!1,deps:a};e.l.$.push(s),s.effect=ws(()=>{a(),!s.ran&&(s.ran=!0,x(t))})}function Ut(){var a=ye;ws(()=>{for(var t of a.l.$){t.deps();var e=t.effect;e.f&Ne&&Ie(e,va),ms(e)&&Ia(e),t.ran=!1}})}function ll(a){return Vt(vn|un,a,!0)}function ws(a,t=0){return Vt(Es|t,a,!0)}function Q(a,t=[],e=[]){Yi(t,e,s=>{Vt(Es,()=>a(...s.map(i)),!0)})}function Ar(a,t=0){var e=Vt(gs|t,a,!0);return e}function Ha(a,t=!0){return Vt(ea,a,!0,t)}function Mr(a){var t=a.teardown;if(t!==null){const e=Ca,s=se;Vn(!0),qt(null);try{t.call(null)}finally{Vn(e),qt(s)}}}function Nr(a,t=!1){var n;var e=a.first;for(a.first=a.last=null;e!==null;){(n=e.ac)==null||n.abort(fn);var s=e.next;e.f&Ua?e.parent=null:Qt(e,t),e=s}}function cl(a){for(var t=a.first;t!==null;){var e=t.next;t.f&ea||Qt(t),t=e}}function Qt(a,t=!0){var e=!1;(t||a.f&ui)&&a.nodes_start!==null&&a.nodes_end!==null&&(Pr(a.nodes_start,a.nodes_end),e=!0),Nr(a,t&&!e),Ns(a,0),Ie(a,ka);var s=a.transitions;if(s!==null)for(const r of s)r.stop();Mr(a);var n=a.parent;n!==null&&n.first!==null&&Er(a),a.next=a.prev=a.teardown=a.ctx=a.deps=a.fn=a.nodes_start=a.nodes_end=a.ac=null}function Pr(a,t){for(;a!==null;){var e=a===t?null:Ht(a);a.remove(),a=e}}function Er(a){var t=a.parent,e=a.prev,s=a.next;e!==null&&(e.next=s),s!==null&&(s.prev=e),t!==null&&(t.first===a&&(t.first=s),t.last===a&&(t.last=e))}function xn(a,t){var e=[];Sn(a,e,!0),Rr(e,()=>{Qt(a),t&&t()})}function Rr(a,t){var e=a.length;if(e>0){var s=()=>--e||t();for(var n of a)n.out(s)}else t()}function Sn(a,t,e){if(!(a.f&Mt)){if(a.f^=Mt,a.transitions!==null)for(const l of a.transitions)(l.is_global||e)&&t.push(l);for(var s=a.first;s!==null;){var n=s.next,r=(s.f&on)!==0||(s.f&ea)!==0;Sn(s,t,r?e:!1),s=n}}}function Dn(a){Ir(a,!0)}function Ir(a,t){if(a.f&Mt){a.f^=Mt,a.f&Ne||(Ie(a,ft),ua(a));for(var e=a.first;e!==null;){var s=e.next,n=(e.f&on)!==0||(e.f&ea)!==0;Ir(e,n?t:!1),e=s}if(a.transitions!==null)for(const r of a.transitions)(r.is_global||t)&&r.in()}}function Ps(a){ne&&xt(a)!==null&&yn(a)}let $n=!1;function zr(){$n||($n=!0,document.addEventListener("reset",a=>{Promise.resolve().then(()=>{var t;if(!a.defaultPrevented)for(const e of a.target.elements)(t=e.__on_r)==null||t.call(e)})},{capture:!0}))}function Lr(a){var t=se,e=te;qt(null),da(null);try{return a()}finally{qt(t),da(e)}}function Tn(a,t,e,s=e){a.addEventListener(t,()=>Lr(e));const n=a.__on_r;n?a.__on_r=()=>{n(),s(!0)}:a.__on_r=()=>s(!0),zr()}const ol=new Set,jn=new Set;function ul(a,t,e,s={}){function n(r){if(s.capture||ts.call(t,r),!r.cancelBubble)return Lr(()=>e==null?void 0:e.call(this,r))}return a.startsWith("pointer")||a.startsWith("touch")||a==="wheel"?ls(()=>{t.addEventListener(a,n,s)}):t.addEventListener(a,n,s),n}function q(a,t,e,s,n){var r={capture:s,passive:n},l=ul(a,t,e,r);(t===document.body||t===window||t===document||t instanceof HTMLMediaElement)&&Cn(()=>{t.removeEventListener(a,l,r)})}function ts(a){var y;var t=this,e=t.ownerDocument,s=a.type,n=((y=a.composedPath)==null?void 0:y.call(a))||[],r=n[0]||a.target,l=0,c=a.__root;if(c){var o=n.indexOf(c);if(o!==-1&&(t===document||t===window)){a.__root=t;return}var d=n.indexOf(t);if(d===-1)return;o<=d&&(l=o)}if(r=n[l]||a.target,r!==t){Ds(a,"currentTarget",{configurable:!0,get(){return r||e}});var f=se,h=te;qt(null),da(null);try{for(var _,w=[];r!==null;){var m=r.assignedSlot||r.parentNode||r.host||null;try{var E=r["__"+s];if(E!=null&&(!r.disabled||a.target===r))if($a(E)){var[D,...g]=E;D.apply(r,[a,...g])}else E.call(r,a)}catch(M){_?w.push(M):_=M}if(a.cancelBubble||m===t||m===null)break;r=m}if(_){for(let M of w)queueMicrotask(()=>{throw M});throw _}}finally{a.__root=t,delete a.currentTarget,qt(f),da(h)}}}function Fr(a){var t=document.createElement("template");return t.innerHTML=a.replaceAll("<!>","<!---->"),t.content}function Ot(a,t){var e=te;e.nodes_start===null&&(e.nodes_start=a,e.nodes_end=t)}function V(a,t){var e=(t&Oi)!==0,s=(t&Bi)!==0,n,r=!a.startsWith("<!>");return()=>{if(ne)return Ot(de,null),de;n===void 0&&(n=Fr(r?a:"<!>"+a),e||(n=xt(n)));var l=s||cr?document.importNode(n,!0):n.cloneNode(!0);if(e){var c=xt(l),o=l.lastChild;Ot(c,o)}else Ot(l,l);return l}}function js(a=""){if(!ne){var t=Bt(a+"");return Ot(t,t),t}var e=de;return e.nodeType!==hn&&(e.before(e=Bt()),ht(e)),Ot(e,e),e}function Lt(){if(ne)return Ot(de,null),de;var a=document.createDocumentFragment(),t=document.createComment(""),e=Bt();return a.append(t,e),Ot(t,e),a}function O(a,t){if(ne){te.nodes_end=de,Ba();return}a!==null&&a.before(t)}const dl=["touchstart","touchmove"];function vl(a){return dl.includes(a)}function Y(a,t){var e=t==null?"":typeof t=="object"?t+"":t;e!==(a.__t??(a.__t=a.nodeValue))&&(a.__t=e,a.nodeValue=e+"")}function Or(a,t){return Br(a,t)}function fl(a,t){Zs(),t.intro=t.intro??!1;const e=t.target,s=ne,n=de;try{for(var r=xt(e);r&&(r.nodeType!==Oa||r.data!==rr);)r=Ht(r);if(!r)throw wa;Yt(!0),ht(r),Ba();const l=Br(a,{...t,anchor:r});if(de===null||de.nodeType!==Oa||de.data!==_n)throw ps(),wa;return Yt(!1),l}catch(l){if(l===wa)return t.recover===!1&&xi(),Zs(),yn(e),Yt(!1),Or(a,t);throw l}finally{Yt(s),ht(n)}}const Ma=new Map;function Br(a,{target:t,anchor:e,props:s={},events:n,context:r,intro:l=!0}){Zs();var c=new Set,o=h=>{for(var _=0;_<h.length;_++){var w=h[_];if(!c.has(w)){c.add(w);var m=vl(w);t.addEventListener(w,ts,{passive:m});var E=Ma.get(w);E===void 0?(document.addEventListener(w,ts,{passive:m}),Ma.set(w,1)):Ma.set(w,E+1)}}};o(gn(ol)),jn.add(o);var d=void 0,f=il(()=>{var h=e??t.appendChild(Bt());return Ha(()=>{if(r){Ge({});var _=ye;_.c=r}n&&(s.$$events=n),ne&&Ot(h,null),d=a(h,s)||{},ne&&(te.nodes_end=de),r&&Je()}),()=>{var m;for(var _ of c){t.removeEventListener(_,ts);var w=Ma.get(_);--w===0?(document.removeEventListener(_,ts),Ma.delete(_)):Ma.set(_,w)}jn.delete(o),h!==e&&((m=h.parentNode)==null||m.removeChild(h))}});return nn.set(d,f),d}let nn=new WeakMap;function hl(a,t){const e=nn.get(a);return e?(nn.delete(a),e(t)):Promise.resolve()}function An(a){return function(...t){var e=t[0];return e.stopPropagation(),a==null?void 0:a.apply(this,t)}}function gl(a){return function(...t){var e=t[0];return e.preventDefault(),a==null?void 0:a.apply(this,t)}}function et(a){return new pl(a)}var Wt,kt;class pl{constructor(t){Ve(this,Wt);Ve(this,kt);var r;var e=new Map,s=(l,c)=>{var o=$(c,!1,!1);return e.set(l,o),o};const n=new Proxy({...t.props||{},$$events:{}},{get(l,c){return i(e.get(c)??s(c,Reflect.get(l,c)))},has(l,c){return c===er?!0:(i(e.get(c)??s(c,Reflect.get(l,c))),Reflect.has(l,c))},set(l,c,o){return b(e.get(c)??s(c,o),o),Reflect.set(l,c,o)}});Ze(this,kt,(t.hydrate?fl:Or)(t.component,{target:t.target,anchor:t.anchor,props:n,context:t.context,intro:t.intro??!1,recover:t.recover})),(!((r=t==null?void 0:t.props)!=null&&r.$$host)||t.sync===!1)&&K(),Ze(this,Wt,n.$$events);for(const l of Object.keys(j(this,kt)))l==="$set"||l==="$destroy"||l==="$on"||Ds(this,l,{get(){return j(this,kt)[l]},set(c){j(this,kt)[l]=c},enumerable:!0});j(this,kt).$set=l=>{Object.assign(n,l)},j(this,kt).$destroy=()=>{hl(j(this,kt))}}$set(t){j(this,kt).$set(t)}$on(t,e){j(this,Wt)[t]=j(this,Wt)[t]||[];const s=(...n)=>e.call(this,...n);return j(this,Wt)[t].push(s),()=>{j(this,Wt)[t]=j(this,Wt)[t].filter(n=>n!==s)}}$destroy(){j(this,kt).$destroy()}}Wt=new WeakMap,kt=new WeakMap;const ml="5";var Qn;typeof window<"u"&&((Qn=window.__svelte??(window.__svelte={})).v??(Qn.v=new Set)).add(ml);Ni();function Ls(a){ye===null&&mn(),ja&&ye.l!==null?yl(ye).m.push(a):sn(()=>{const t=x(a);if(typeof t=="function")return t})}function wl(a){ye===null&&mn(),Ls(()=>()=>x(a))}function _l(a,t,{bubbles:e=!1,cancelable:s=!1}={}){return new CustomEvent(a,{detail:t,bubbles:e,cancelable:s})}function Mn(){const a=ye;return a===null&&mn(),(t,e,s)=>{var r;const n=(r=a.s.$$events)==null?void 0:r[t];if(n){const l=$a(n)?n.slice():[n],c=_l(t,e,s);for(const o of l)o.call(a.x,c);return!c.defaultPrevented}return!0}}function yl(a){var t=a.l;return t.u??(t.u={a:[],b:[],m:[]})}function W(a,t,e=!1){ne&&Ba();var s=a,n=null,r=null,l=Fe,c=e?on:0,o=!1;const d=(w,m=!0)=>{o=!0,_(m,w)};var f=null;function h(){f!==null&&(f.lastChild.remove(),s.before(f),f=null);var w=l?n:r,m=l?r:n;w&&Dn(w),m&&xn(m,()=>{l?r=null:n=null})}const _=(w,m)=>{if(l===(l=w))return;let E=!1;if(ne){const B=ir(s)===wn;!!l===B&&(s=Qs(),ht(s),Yt(!1),E=!0)}var D=dr(),g=s;if(D&&(f=document.createDocumentFragment(),f.append(g=Bt())),l?n??(n=m&&Ha(()=>m(g))):r??(r=m&&Ha(()=>m(g))),D){var y=Me,M=l?n:r,R=l?r:n;M&&y.skipped_effects.delete(M),R&&y.skipped_effects.add(R),y.add_callback(h)}else h();E&&Yt(!0)};Ar(()=>{o=!1,t(d),o||_(null,null)},c),ne&&(s=de)}function $e(a,t){return t}function bl(a,t,e){for(var s=a.items,n=[],r=t.length,l=0;l<r;l++)Sn(t[l].e,n,!0);var c=r>0&&n.length===0&&e!==null;if(c){var o=e.parentNode;yn(o),o.append(e),s.clear(),It(a,t[0].prev,t[r-1].next)}Rr(n,()=>{for(var d=0;d<r;d++){var f=t[d];c||(s.delete(f.k),It(a,f.prev,f.next)),Qt(f.e,!c)}})}function Be(a,t,e,s,n,r=null){var l=a,c={flags:t,items:new Map,first:null},o=(t&nr)!==0;if(o){var d=a;l=ne?ht(xt(d)):d.appendChild(Bt())}ne&&Ba();var f=null,h=!1,_=new Map,w=zt(()=>{var g=e();return $a(g)?g:g==null?[]:gn(g)}),m,E;function D(){kl(E,m,c,_,l,n,t,s,e),r!==null&&(m.length===0?f?Dn(f):f=Ha(()=>r(l)):f!==null&&xn(f,()=>{f=null}))}Ar(()=>{E??(E=te),m=i(w);var g=m.length;if(h&&g===0)return;h=g===0;let y=!1;if(ne){var M=ir(l)===wn;M!==(g===0)&&(l=Qs(),ht(l),Yt(!1),y=!0)}if(ne){for(var R=null,B,T=0;T<g;T++){if(de.nodeType===Oa&&de.data===_n){l=de,y=!0,Yt(!1);break}var F=m[T],ee=s(F,T);B=rn(de,c,R,null,F,ee,T,n,t,e),c.items.set(ee,B),R=B}g>0&&ht(Qs())}if(ne)g===0&&r&&(f=Ha(()=>r(l)));else if(dr()){var _e=new Set,pe=Me;for(T=0;T<g;T+=1){F=m[T],ee=s(F,T);var I=c.items.get(ee)??_.get(ee);I?t&(Rs|Is)&&qr(I,F,T,t):(B=rn(null,c,null,null,F,ee,T,n,t,e,!0),_.set(ee,B)),_e.add(ee)}for(const[z,re]of c.items)_e.has(z)||pe.skipped_effects.add(re.e);pe.add_callback(D)}else D();y&&Yt(!0),i(w)}),ne&&(l=de)}function kl(a,t,e,s,n,r,l,c,o){var be,Pe,ge,H;var d=(l&Pi)!==0,f=(l&(Rs|Is))!==0,h=t.length,_=e.items,w=e.first,m=w,E,D=null,g,y=[],M=[],R,B,T,F;if(d)for(F=0;F<h;F+=1)R=t[F],B=c(R,F),T=_.get(B),T!==void 0&&((be=T.a)==null||be.measure(),(g??(g=new Set)).add(T));for(F=0;F<h;F+=1){if(R=t[F],B=c(R,F),T=_.get(B),T===void 0){var ee=s.get(B);if(ee!==void 0){s.delete(B),_.set(B,ee);var _e=D?D.next:m;It(e,D,ee),It(e,ee,_e),Ks(ee,_e,n),D=ee}else{var pe=m?m.e.nodes_start:n;D=rn(pe,e,D,D===null?e.first:D.next,R,B,F,r,l,o)}_.set(B,D),y=[],M=[],m=D.next;continue}if(f&&qr(T,R,F,l),T.e.f&Mt&&(Dn(T.e),d&&((Pe=T.a)==null||Pe.unfix(),(g??(g=new Set)).delete(T))),T!==m){if(E!==void 0&&E.has(T)){if(y.length<M.length){var I=M[0],z;D=I.prev;var re=y[0],ie=y[y.length-1];for(z=0;z<y.length;z+=1)Ks(y[z],I,n);for(z=0;z<M.length;z+=1)E.delete(M[z]);It(e,re.prev,ie.next),It(e,D,re),It(e,ie,I),m=I,D=ie,F-=1,y=[],M=[]}else E.delete(T),Ks(T,m,n),It(e,T.prev,T.next),It(e,T,D===null?e.first:D.next),It(e,D,T),D=T;continue}for(y=[],M=[];m!==null&&m.k!==B;)m.e.f&Mt||(E??(E=new Set)).add(m),M.push(m),m=m.next;if(m===null)continue;T=m}y.push(T),D=T,m=T.next}if(m!==null||E!==void 0){for(var ae=E===void 0?[]:gn(E);m!==null;)m.e.f&Mt||ae.push(m),m=m.next;var ve=ae.length;if(ve>0){var fe=l&nr&&h===0?n:null;if(d){for(F=0;F<ve;F+=1)(ge=ae[F].a)==null||ge.measure();for(F=0;F<ve;F+=1)(H=ae[F].a)==null||H.fix()}bl(e,ae,fe)}}d&&ls(()=>{var X;if(g!==void 0)for(T of g)(X=T.a)==null||X.apply()}),a.first=e.first&&e.first.e,a.last=D&&D.e;for(var me of s.values())Qt(me.e);s.clear()}function qr(a,t,e,s){s&Rs&&qa(a.v,t),s&Is?qa(a.i,e):a.i=e}function rn(a,t,e,s,n,r,l,c,o,d,f){var h=(o&Rs)!==0,_=(o&Ei)===0,w=h?_?$(n,!1,!1):us(n):n,m=o&Is?us(l):l,E={i:m,v:w,k:r,a:null,e:null,prev:e,next:s};try{if(a===null){var D=document.createDocumentFragment();D.append(a=Bt())}return E.e=Ha(()=>c(a,w,m,d),ne),E.e.prev=e&&e.e,E.e.next=s&&s.e,e===null?f||(t.first=E):(e.next=E,e.e.next=E.e),s!==null&&(s.prev=E,s.e.prev=E.e),E}finally{}}function Ks(a,t,e){for(var s=a.next?a.next.e.nodes_start:e,n=t?t.e.nodes_start:e,r=a.e.nodes_start;r!==null&&r!==s;){var l=Ht(r);n.before(r),r=l}}function It(a,t,e){t===null?a.first=e:(t.next=e,t.e.next=e&&e.e),e!==null&&(e.prev=t,e.e.prev=t&&t.e)}function Cl(a,t,e=!1,s=!1,n=!1){var r=a,l="";Q(()=>{var c=te;if(l===(l=t()??"")){ne&&Ba();return}if(c.nodes_start!==null&&(Pr(c.nodes_start,c.nodes_end),c.nodes_start=c.nodes_end=null),l!==""){if(ne){de.data;for(var o=Ba(),d=o;o!==null&&(o.nodeType!==Oa||o.data!=="");)d=o,o=Ht(o);if(o===null)throw ps(),wa;Ot(de,d),r=ht(o);return}var f=l+"";e?f=`<svg>${f}</svg>`:s&&(f=`<math>${f}</math>`);var h=Fr(f);if((e||s)&&(h=xt(h)),Ot(xt(h),h.lastChild),e||s)for(;xt(h);)r.before(xt(h));else r.before(h)}})}function Hr(a){var t,e,s="";if(typeof a=="string"||typeof a=="number")s+=a;else if(typeof a=="object")if(Array.isArray(a)){var n=a.length;for(t=0;t<n;t++)a[t]&&(e=Hr(a[t]))&&(s&&(s+=" "),s+=e)}else for(e in a)a[e]&&(s&&(s+=" "),s+=e);return s}function xl(){for(var a,t,e=0,s="",n=arguments.length;e<n;e++)(a=arguments[e])&&(t=Hr(a))&&(s&&(s+=" "),s+=t);return s}function Vr(a){return typeof a=="object"?xl(a):a??""}const Kn=[...` 	
\r\f \v\uFEFF`];function Sl(a,t,e){var s=a==null?"":""+a;if(t&&(s=s?s+" "+t:t),e){for(var n in e)if(e[n])s=s?s+" "+n:n;else if(s.length)for(var r=n.length,l=0;(l=s.indexOf(n,l))>=0;){var c=l+r;(l===0||Kn.includes(s[l-1]))&&(c===s.length||Kn.includes(s[c]))?s=(l===0?"":s.substring(0,l))+s.substring(c+1):l=c}}return s===""?null:s}function Dl(a,t){return a==null?null:String(a)}function je(a,t,e,s,n,r){var l=a.__className;if(ne||l!==e||l===void 0){var c=Sl(e,s,r);(!ne||c!==a.getAttribute("class"))&&(c==null?a.removeAttribute("class"):a.className=c),a.__className=e}else if(r&&n!==r)for(var o in r){var d=!!r[o];(n==null||d!==!!n[o])&&a.classList.toggle(o,d)}return r}function Ur(a,t,e,s){var n=a.__style;if(ne||n!==t){var r=Dl(t);(!ne||r!==a.getAttribute("style"))&&(r==null?a.removeAttribute("style"):a.style.cssText=r),a.__style=t}return s}function $r(a,t,e=!1){if(a.multiple){if(t==null)return;if(!$a(t))return Hi();for(var s of a.options)s.selected=t.includes(ss(s));return}for(s of a.options){var n=ss(s);if(lr(n,t)){s.selected=!0;return}}(!e||t!==void 0)&&(a.selectedIndex=-1)}function Tl(a){var t=new MutationObserver(()=>{$r(a,a.__value)});t.observe(a,{childList:!0,subtree:!0,attributes:!0,attributeFilter:["value"]}),Cn(()=>{t.disconnect()})}function ra(a,t,e=t){var s=!0;Tn(a,"change",n=>{var r=n?"[selected]":":checked",l;if(a.multiple)l=[].map.call(a.querySelectorAll(r),ss);else{var c=a.querySelector(r)??a.querySelector("option:not([disabled])");l=c&&ss(c)}e(l)}),Tr(()=>{var n=t();if($r(a,n,s),s&&n===void 0){var r=a.querySelector(":checked");r!==null&&(n=ss(r),e(n))}a.__value=n,s=!1}),Tl(a)}function ss(a){return"__value"in a?a.__value:a.value}const Al=Symbol("is custom element"),Ml=Symbol("is html");function At(a){if(ne){var t=!1,e=()=>{if(!t){if(t=!0,a.hasAttribute("value")){var s=a.value;Va(a,"value",null),a.value=s}if(a.hasAttribute("checked")){var n=a.checked;Va(a,"checked",null),a.checked=n}}};a.__on_r=e,ji(e),zr()}}function Gn(a,t){var e=Nn(a);e.value===(e.value=t??void 0)||a.value===t&&(t!==0||a.nodeName!=="PROGRESS")||(a.value=t??"")}function ns(a,t){var e=Nn(a);e.checked!==(e.checked=t??void 0)&&(a.checked=t)}function Va(a,t,e,s){var n=Nn(a);ne&&(n[t]=a.getAttribute(t),t==="src"||t==="srcset"||t==="href"&&a.nodeName==="LINK")||n[t]!==(n[t]=e)&&(t==="loading"&&(a[di]=e),e==null?a.removeAttribute(t):typeof e!="string"&&Nl(a).includes(t)?a[t]=e:a.setAttribute(t,e))}function Nn(a){return a.__attributes??(a.__attributes={[Al]:a.nodeName.includes("-"),[Ml]:a.namespaceURI===qi})}var Jn=new Map;function Nl(a){var t=Jn.get(a.nodeName);if(t)return t;Jn.set(a.nodeName,t=[]);for(var e,s=a,n=Element.prototype;n!==s;){e=tr(s);for(var r in e)e[r].set&&t.push(r);s=pn(s)}return t}function ba(a,t,e=t){var s=Ka(),n=new WeakSet;Tn(a,"input",r=>{var l=r?a.defaultValue:a.value;if(l=Js(a)?Ws(l):l,e(l),Me!==null&&n.add(Me),s&&l!==(l=t())){var c=a.selectionStart,o=a.selectionEnd;a.value=l??"",o!==null&&(a.selectionStart=c,a.selectionEnd=Math.min(o,a.value.length))}}),(ne&&a.defaultValue!==a.value||x(t)==null&&a.value)&&(e(Js(a)?Ws(a.value):a.value),Me!==null&&n.add(Me)),ws(()=>{var r=t();a===document.activeElement&&n.has(Me)||Js(a)&&r===Ws(a.value)||a.type==="date"&&!r&&!a.value||r!==a.value&&(a.value=r??"")})}const Gs=new Set;function Pl(a,t,e,s,n=s){var r=e.getAttribute("type")==="checkbox",l=a;let c=!1;if(t!==null)for(var o of t)l=l[o]??(l[o]=[]);l.push(e),Tn(e,"change",()=>{var d=e.__value;r&&(d=Wn(l,d,e.checked)),n(d)},()=>n(r?[]:null)),ws(()=>{var d=s();if(ne&&e.defaultChecked!==e.checked){c=!0;return}r?(d=d||[],e.checked=d.includes(e.__value)):e.checked=lr(e.__value,d)}),Cn(()=>{var d=l.indexOf(e);d!==-1&&l.splice(d,1)}),Gs.has(l)||(Gs.add(l),ls(()=>{l.sort((d,f)=>d.compareDocumentPosition(f)===4?-1:1),Gs.delete(l)})),ls(()=>{if(c){var d;if(r)d=Wn(l,d,e.checked);else{var f=l.find(h=>h.checked);d=f==null?void 0:f.__value}n(d)}})}function Wn(a,t,e){for(var s=new Set,n=0;n<a.length;n+=1)a[n].checked&&s.add(a[n].__value);return e||s.delete(t),Array.from(s)}function Js(a){var t=a.type;return t==="number"||t==="range"}function Ws(a){return a===""?null:+a}function Yn(a,t){return a===t||(a==null?void 0:a[Xt])===t}function jr(a={},t,e,s){return Tr(()=>{var n,r;return ws(()=>{n=r,r=[],x(()=>{a!==e(...r)&&(t(a,...r),n&&Yn(e(...n),a)&&t(null,...n))})}),()=>{ls(()=>{r&&Yn(e(...r),a)&&t(null,...r)})}}),a}function St(a=!1){const t=ye,e=t.l.u;if(!e)return;let s=()=>he(t.s);if(a){let n=0,r={};const l=zs(()=>{let c=!1;const o=t.s;for(const d in o)o[d]!==r[d]&&(r[d]=o[d],c=!0);return c&&n++,n});s=()=>i(l)}e.b.length&&rl(()=>{Xn(t,s),Ts(e.b)}),sn(()=>{const n=x(()=>e.m.map(gi));return()=>{for(const r of n)typeof r=="function"&&r()}}),e.a.length&&sn(()=>{Xn(t,s),Ts(e.a)})}function Xn(a,t){if(a.l.s)for(const e of a.l.s)i(e);t()}function Pn(a,t){var r;var e=(r=a.$$events)==null?void 0:r[t.type],s=$a(e)?e.slice():e==null?[]:[e];for(var n of s)n.call(this,t)}function tt(a,t,e){var s;a.$$events||(a.$$events={}),(s=a.$$events)[t]||(s[t]=[]),a.$$events[t].push(e)}function at(a){for(var t in a)t in this&&(this[t]=a[t])}let xs=!1;function El(a){var t=xs;try{return xs=!1,[a(),xs]}finally{xs=t}}function G(a,t,e,s){var M;var n=!ja||(e&Ii)!==0,r=(e&Li)!==0,l=(e&Fi)!==0,c=s,o=!0,d=()=>(o&&(o=!1,c=l?x(s):s),c),f;if(r){var h=Xt in a||er in a;f=((M=Ea(a,t))==null?void 0:M.set)??(h&&t in a?R=>a[t]=R:void 0)}var _,w=!1;r?[_,w]=El(()=>a[t]):_=a[t],_===void 0&&s!==void 0&&(_=d(),f&&(n&&Si(),f(_)));var m;if(n?m=()=>{var R=a[t];return R===void 0?d():(o=!0,R)}:m=()=>{var R=a[t];return R!==void 0&&(c=void 0),R===void 0?c:R},n&&!(e&zi))return m;if(f){var E=a.$$legacy;return function(R,B){return arguments.length>0?((!n||!B||E||w)&&f(B?m():R),R):m()}}var D=!1,g=(e&Ri?zs:zt)(()=>(D=!1,m()));r&&i(g);var y=te;return function(R,B){if(arguments.length>0){const T=B?i(g):n&&r?Na(R):R;return b(g,T),D=!0,c!==void 0&&(c=T),R}return Ca&&D||y.f&ka?g.v:i(g)}}class Rl{constructor(){ue(this,"decks",[]);ue(this,"cards",[]);ue(this,"currentSession",null);ue(this,"settings",null);ue(this,"isLoading",!1);ue(this,"error",null);ue(this,"currentPage","deck-study");ue(this,"selectedFiles",[]);ue(this,"inputText","");ue(this,"webUrl","");ue(this,"selectedAIModel","gpt-4");ue(this,"questionTypeRatios",{fill:30,choice:40,qa:30});ue(this,"generatedCards",[]);ue(this,"isGenerating",!1)}setDecks(t){this.decks=t}addDeck(t){this.decks.push(t)}updateDeck(t,e){const s=this.decks.findIndex(n=>n.id===t);s!==-1&&(this.decks[s]={...this.decks[s],...e})}removeDeck(t){this.decks=this.decks.filter(e=>e.id!==t)}setCards(t){this.cards=t}addCard(t){this.cards.push(t)}updateCard(t,e){const s=this.cards.findIndex(n=>n.id===t);s!==-1&&(this.cards[s]={...this.cards[s],...e})}removeCard(t){this.cards=this.cards.filter(e=>e.id!==t)}setCurrentPage(t){this.currentPage=t}setSettings(t){this.settings=t}setLoading(t){this.isLoading=t}setError(t){this.error=t}setInputText(t){this.inputText=t}setWebUrl(t){this.webUrl=t}setSelectedAIModel(t){this.selectedAIModel=t}updateQuestionTypeRatio(t,e){this.questionTypeRatios[t]=e}addSelectedFile(t){this.selectedFiles.push(t)}removeSelectedFile(t){this.selectedFiles=this.selectedFiles.filter(e=>e.name!==t)}clearSelectedFiles(){this.selectedFiles=[]}setGeneratedCards(t){this.generatedCards=t}setGenerating(t){this.isGenerating=t}startStudySession(t){this.currentSession={id:Date.now().toString(),deckId:t,startTime:new Date,cardsStudied:0,correctAnswers:0,averageTime:0}}endStudySession(){this.currentSession&&(this.currentSession.endTime=new Date)}updateSessionStats(t,e,s){this.currentSession&&(this.currentSession.cardsStudied=t,this.currentSession.correctAnswers=e,this.currentSession.averageTime=s)}get totalDecks(){return this.decks.length}get totalCards(){return this.cards.length}get newCardsCount(){return this.cards.filter(t=>!t.lastReview).length}get reviewCardsCount(){const t=new Date;return this.cards.filter(e=>e.nextReview&&e.nextReview<=t).length}get studyProgress(){return this.totalCards===0?0:Math.round(this.cards.filter(t=>t.lastReview).length/this.totalCards*100)}}const le=new Rl,Il={add:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M256 80c0-17.7-14.3-32-32-32s-32 14.3-32 32V224H48c-17.7 0-32 14.3-32 32s14.3 32 32 32H192V432c0 17.7 14.3 32 32 32s32-14.3 32-32V288H400c17.7 0 32-14.3 32-32s-14.3-32-32-32H256V80z"/></svg>',edit:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M471.6 21.7c-21.9-21.9-57.3-21.9-79.2 0L362.3 51.7l97.9 97.9 30.1-30.1c21.9-21.9 21.9-57.3 0-79.2L471.6 21.7zm-299.2 220c-6.1 6.1-10.8 13.6-13.5 21.9l-29.6 88.8c-2.9 8.6-.6 18.1 5.8 24.6s15.9 8.7 24.6 5.8l88.8-29.6c8.4-2.8 15.8-7.5 21.9-13.5L437.7 172.3 339.7 74.3 172.4 241.7zM96 64C43 64 0 107 0 160V416c0 53 43 96 96 96H352c53 0 96-43 96-96V320c0-17.7-14.3-32-32-32s-32 14.3-32 32v96c0 17.7-14.3 32-32 32H96c-17.7 0-32-14.3-32-32V160c0-17.7 14.3-32 32-32h96c17.7 0 32-14.3 32-32s-14.3-32-32-32H96z"/></svg>',delete:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M135.2 17.7L128 32H32C14.3 32 0 46.3 0 64S14.3 96 32 96H416c17.7 0 32-14.3 32-32s-14.3-32-32-32H320l-7.2-14.3C307.4 6.8 296.3 0 284.2 0H163.8c-12.1 0-23.2 6.8-28.6 17.7zM416 128H32L53.2 467c1.6 25.3 22.6 45 47.9 45H346.9c25.3 0 46.3-19.7 47.9-45L416 128z"/></svg>',copy:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M224 0c-35.3 0-64 28.7-64 64v224c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V64c0-35.3-28.7-64-64-64H224zM64 160c-35.3 0-64 28.7-64 64V448c0 35.3 28.7 64 64 64H288c35.3 0 64-28.7 64-64V384H288v64H64V224h64V160H64z"/></svg>',save:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V173.3c0-17-6.7-33.3-18.7-45.3L352 50.7C340 38.7 323.7 32 306.7 32H64zm0 96c0-17.7 14.3-32 32-32H288c17.7 0 32 14.3 32 32v64c0 17.7-14.3 32-32 32H96c-17.7 0-32-14.3-32-32V128zM224 288a64 64 0 1 1 0 128 64 64 0 1 1 0-128z"/></svg>',close:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512"><path d="M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z"/></svg>',search:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L330.7 376c-34.4 25.2-76.8 40-122.7 40C93.1 416 0 322.9 0 208S93.1 0 208 0S416 93.1 416 208zM208 352a144 144 0 1 0 0-288 144 144 0 1 0 0 288z"/></svg>',filter:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M3.9 54.9C10.5 40.9 24.5 32 40 32H472c15.5 0 29.5 8.9 36.1 22.9s4.6 30.5-5.2 42.5L320 320.9V448c0 12.1-6.8 23.2-17.7 28.6s-23.8 4.3-33.5-3l-64-48c-8.1-6-12.8-15.5-12.8-25.6V320.9L9 97.3C-.7 85.4-2.8 68.8 3.9 54.9z"/></svg>',sortUp:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><path d="M182.6 137.4c-12.5-12.5-32.8-12.5-45.3 0l-128 128c-9.2 9.2-11.9 22.9-6.9 34.9s16.6 19.8 29.6 19.8H288c12.9 0 24.6-7.8 29.6-19.8s2.2-25.7-6.9-34.9l-128-128z"/></svg>',sortDown:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><path d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8H32c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z"/></svg>',angleLeft:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><path d="M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l192 192c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L77.3 256 246.6 86.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-192 192z"/></svg>',angleRight:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><path d="M310.6 233.4c12.5 12.5 12.5 32.8 0 45.3l-192 192c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3L242.7 256 73.4 86.6c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0l192 192z"/></svg>',angleDoubleLeft:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M41.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.3 256 246.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-160 160zm352-160l-160 160c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L301.3 256 438.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0z"/></svg>',angleDoubleRight:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M470.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L402.7 256 265.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l160-160zm-352 160l160-160c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L210.7 256 73.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0z"/></svg>',cards:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path d="M384 64c0-17.7 14.3-32 32-32H544c17.7 0 32 14.3 32 32s-14.3 32-32 32H448v96c0 17.7-14.3 32-32 32H320v96c0 17.7-14.3 32-32 32H192v96c0 17.7-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32h96V320c0-17.7 14.3-32 32-32H256V192c0-17.7 14.3-32 32-32H384V64z"/></svg>',deck:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path d="M264.5 5.2c14.9-6.9 32.1-6.9 47 0l218.6 101c8.5 3.9 13.9 12.4 13.9 21.8s-5.4 17.9-13.9 21.8l-218.6 101c-14.9 6.9-32.1 6.9-47 0L45.9 149.8C37.4 145.8 32 137.3 32 128s5.4-17.9 13.9-21.8L264.5 5.2zM476.9 209.6l53.2 24.6c8.5 3.9 13.9 12.4 13.9 21.8s-5.4 17.9-13.9 21.8l-218.6 101c-14.9 6.9-32.1 6.9-47 0L45.9 277.8C37.4 273.8 32 265.3 32 256s5.4-17.9 13.9-21.8l53.2-24.6 152 70.2c23.4 10.8 50.4 10.8 73.8 0l152-70.2zm-152 198.2l152-70.2 53.2 24.6c8.5 3.9 13.9 12.4 13.9 21.8s-5.4 17.9-13.9 21.8l-218.6 101c-14.9 6.9-32.1 6.9-47 0L45.9 405.8C37.4 401.8 32 393.3 32 384s5.4-17.9 13.9-21.8l53.2-24.6 152 70.2c23.4 10.8 50.4 10.8 73.8 0z"/></svg>',settings:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M495.9 166.6c3.2 8.7 .5 18.4-6.4 24.6l-43.3 39.4c1.1 8.3 1.7 16.8 1.7 25.4s-.6 17.1-1.7 25.4l43.3 39.4c6.9 6.2 9.6 15.9 6.4 24.6c-4.4 11.9-9.7 23.3-15.8 34.3l-4.7 8.1c-6.6 11-14 21.4-22.1 31.2c-5.9 7.2-15.7 9.6-24.5 6.8l-55.7-17.7c-13.4 10.3-28.2 18.9-44 25.4l-12.5 57.1c-2 9.1-9 16.3-18.2 17.8c-13.8 2.3-28 3.5-42.5 3.5s-28.7-1.2-42.5-3.5c-9.2-1.5-16.2-8.7-18.2-17.8l-12.5-57.1c-15.8-6.5-30.6-15.1-44-25.4L83.1 425.9c-8.8 2.8-18.6 .3-24.5-6.8c-8.1-9.8-15.5-20.2-22.1-31.2l-4.7-8.1c-6.1-11-11.4-22.4-15.8-34.3c-3.2-8.7-.5-18.4 6.4-24.6l43.3-39.4C64.6 273.1 64 264.6 64 256s.6-17.1 1.7-25.4L22.4 191.2c-6.9-6.2-9.6-15.9-6.4-24.6c4.4-11.9 9.7-23.3 15.8-34.3l4.7-8.1c6.6-11 14-21.4 22.1-31.2c5.9-7.2 15.7-9.6 24.5-6.8l55.7 17.7c13.4-10.3 28.2-18.9 44-25.4l12.5-57.1c2-9.1 9-16.3 18.2-17.8C227.3 1.2 241.5 0 256 0s28.7 1.2 42.5 3.5c9.2 1.5 16.2 8.7 18.2 17.8l12.5 57.1c15.8 6.5 30.6 15.1 44 25.4l55.7-17.7c8.8-2.8 18.6-.3 24.5 6.8c8.1 9.8 15.5 20.2 22.1 31.2l4.7 8.1c6.1 11 11.4 22.4 15.8 34.3zM256 336a80 80 0 1 0 0-160 80 80 0 1 0 0 160z"/></svg>',study:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M96 0C43 0 0 43 0 96V416c0 53 43 96 96 96H384h32c17.7 0 32-14.3 32-32s-14.3-32-32-32V384c17.7 0 32-14.3 32-32V32c0-17.7-14.3-32-32-32H384 96zm0 384H352v64H96c-17.7 0-32-14.3-32-32s14.3-32 32-32zm32-240c0-8.8 7.2-16 16-16H336c8.8 0 16 7.2 16 16s-7.2 16-16 16H144c-8.8 0-16-7.2-16-16zm16 48H336c8.8 0 16 7.2 16 16s-7.2 16-16 16H144c-8.8 0-16-7.2-16-16s7.2-16 16-16z"/></svg>',chart:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M64 64c0-17.7-14.3-32-32-32S0 46.3 0 64V400c0 44.2 35.8 80 80 80H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H80c-8.8 0-16-7.2-16-16V64zm406.6 86.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L320 210.7l-57.4-57.4c-12.5-12.5-32.8-12.5-45.3 0l-112 112c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L240 220.7l57.4 57.4c12.5 12.5 32.8 12.5 45.3 0l128-128z"/></svg>',folder:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M64 480H448c35.3 0 64-28.7 64-64V160c0-35.3-28.7-64-64-64H298.5c-17 0-33.3-6.7-45.3-18.7L226.7 50.7c-12-12-28.3-18.7-45.3-18.7H64C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64z"/></svg>',check:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z"/></svg>',undo:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M125.7 160H176c17.7 0 32 14.3 32 32s-14.3 32-32 32H48c-17.7 0-32-14.3-32-32V64c0-17.7 14.3-32 32-32s32 14.3 32 32v51.2L97.6 97.6c87.5-87.5 229.3-87.5 316.8 0s87.5 229.3 0 316.8s-229.3 87.5-316.8 0c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0c62.5 62.5 163.8 62.5 226.3 0s62.5-163.8 0-226.3s-163.8-62.5-226.3 0L125.7 160z"/></svg>',menu:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 128 512"><path d="M64 360a56 56 0 1 0 0 112 56 56 0 1 0 0-112zm0-160a56 56 0 1 0 0 112 56 56 0 1 0 0-112zM120 96A56 56 0 1 0 8 96a56 56 0 1 0 112 0z"/></svg>',robot:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512"><path d="M320 0c17.7 0 32 14.3 32 32V96H472c39.8 0 72 32.2 72 72V440c0 39.8-32.2 72-72 72H168c-39.8 0-72-32.2-72-72V168c0-39.8 32.2-72 72-72H288V32c0-17.7 14.3-32 32-32zM208 384c-8.8 0-16 7.2-16 16s7.2 16 16 16h32c8.8 0 16-7.2 16-16s-7.2-16-16-16H208zm96 0c-8.8 0-16 7.2-16 16s7.2 16 16 16h32c8.8 0 16-7.2 16-16s-7.2-16-16-16H304zm96 0c-8.8 0-16 7.2-16 16s7.2 16 16 16h32c8.8 0 16-7.2 16-16s-7.2-16-16-16H400zM264 256a40 40 0 1 0 -80 0 40 40 0 1 0 80 0zm152 40a40 40 0 1 0 0-80 40 40 0 1 0 0 80zM48 224H64V416H48c-26.5 0-48-21.5-48-48V272c0-26.5 21.5-48 48-48zm544 0c26.5 0 48 21.5 48 48v96c0 26.5-21.5 48-48 48H576V224h16z"/></svg>',smile:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM164.1 325.5C182 346.2 212.6 368 256 368s74-21.8 91.9-42.5c5.8-6.7 15.9-7.4 22.6-1.6s7.4 15.9 1.6 22.6C349.8 372.1 311.1 400 256 400s-93.8-27.9-116.1-53.5c-5.8-6.7-5.1-16.8 1.6-22.6s16.8-5.1 22.6 1.6zM144 208a32 32 0 1 1 64 0 32 32 0 1 1 -64 0zm192-32a32 32 0 1 1 0 64 32 32 0 1 1 0-64z"/></svg>',meh:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM176 208a32 32 0 1 1 0-64 32 32 0 1 1 0 64zm128 0a32 32 0 1 1 0-64 32 32 0 1 1 0 64zM208 352a16 16 0 0 1 16-16h64a16 16 0 0 1 0 32H224a16 16 0 0 1-16-16z"/></svg>',frown:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM159.3 388.7c-2.6 8.4-11.6 13.2-20 10.5s-13.2-11.6-10.5-20C145.5 326.1 196.3 288 256 288s110.5 38.1 127.3 91.3c2.6 8.4-2.1 17.4-10.5 20s-17.4-2.1-20-10.5C340.5 349.4 302.1 320 256 320s-84.5 29.4-96.7 68.7zM144 208a32 32 0 1 1 64 0 32 32 0 1 1 -64 0zm192-32a32 32 0 1 1 0 64 32 32 0 1 1 0-64z"/></svg>',info:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 192 512"><path d="M48 80a48 48 0 1 1 96 0A48 48 0 1 1 48 80zM0 224c0-17.7 14.3-32 32-32H96c17.7 0 32 14.3 32 32V448h32c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H64V256H32c-17.7 0-32-14.3-32-32z"/></svg>',question:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><path d="M80 160c0-35.3 28.7-64 64-64h32c35.3 0 64 28.7 64 64v3.6c0 21.8-11.1 42.1-29.4 53.8l-42.2 27.1c-25.2 16.2-40.4 44.1-40.4 74V320c0 17.7 14.3 32 32 32s32-14.3 32-32v-1.4c0-8.2 4.2-15.8 11-20.2l42.2-27.1c36.6-23.6 58.8-64.1 58.8-107.7V160c0-70.7-57.3-128-128-128H144C73.3 32 16 89.3 16 160c0 17.7 14.3 32 32 32s32-14.3 32-32zm80 320a40 40 0 1 0 0-80 40 40 0 1 0 0 80z"/></svg>',list:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M40 48C26.7 48 16 58.7 16 72v48c0 13.3 10.7 24 24 24H88c13.3 0 24-10.7 24-24V72c0-13.3-10.7-24-24-24H40zM192 64c-17.7 0-32 14.3-32 32s14.3 32 32 32H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H192zm0 160c-17.7 0-32 14.3-32 32s14.3 32 32 32H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H192zm0 160c-17.7 0-32 14.3-32 32s14.3 32 32 32H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H192zM16 232v48c0 13.3 10.7 24 24 24H88c13.3 0 24-10.7 24-24V232c0-13.3-10.7-24-24-24H40c-13.3 0-24 10.7-24 24zM40 368c-13.3 0-24 10.7-24 24v48c0 13.3 10.7 24 24 24H88c13.3 0 24-10.7 24-24V392c0-13.3-10.7-24-24-24H40z"/></svg>',star:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path d="M316.9 18C311.6 7 300.4 0 288.1 0s-23.4 7-28.8 18L195 150.3 51.4 171.5c-12 1.8-22 10.2-25.7 21.7s-.7 24.2 7.9 32.7L137.8 329 113.2 474.7c-2 12 3 24.2 12.9 31.3s23 8 33.8 2.3l128.3-68.5 128.3 68.5c10.8 5.7 23.9 4.9 33.8-2.3s14.9-19.3 12.9-31.3L438.5 329 542.7 225.9c8.6-8.5 11.7-21.2 7.9-32.7s-13.7-19.9-25.7-21.7L381.2 150.3 316.9 18z"/></svg>',play:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512"><path d="M73 39c-14.8-9.1-33.4-9.4-48.5-.9S0 62.6 0 80V432c0 17.4 9.4 33.4 24.5 41.9s33.7 8.1 48.5-.9L361 297c14.3-8.7 23-24.2 23-41s-8.7-32.2-23-41L73 39z"/></svg>',clock:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M256 0a256 256 0 1 1 0 512A256 256 0 1 1 256 0zM232 120V256c0 8 4 15.5 10.7 20l96 64c11 7.4 25.9 4.4 33.3-6.7s4.4-25.9-6.7-33.3L280 243.2V120c0-13.3-10.7-24-24-24s-24 10.7-24 24z"/></svg>',brain:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M184 0c30.9 0 56 25.1 56 56V456c0 30.9-25.1 56-56 56c-28.9 0-52.7-21.9-55.7-50.1c-5.2 1.4-10.7 2.1-16.3 2.1c-35.3 0-64-28.7-64-64c0-7.4 1.3-14.6 3.6-21.2C21.4 367.4 0 338.2 0 304c0-31.9 18.7-59.5 45.8-72.3C37.1 220.8 32 207 32 192c0-30.7 21.6-56.3 50.4-62.6C80.8 123.9 80 118 80 112c0-29.9 20.6-55.1 48.3-62.1C131.3 21.9 155.1 0 184 0zM328 0c28.9 0 52.6 21.9 55.7 49.9c27.8 7 48.3 32.1 48.3 62.1c0 6-.8 11.9-2.4 17.4c28.8 6.2 50.4 31.9 50.4 62.6c0 15-5.1 28.8-13.8 39.7C493.3 244.5 512 272.1 512 304c0 34.2-21.4 63.4-51.6 74.8c2.3 6.6 3.6 13.8 3.6 21.2c0 35.3-28.7 64-64 64c-5.6 0-11.1-.7-16.3-2.1c-3 28.2-26.8 50.1-55.7 50.1c-30.9 0-56-25.1-56-56V56c0-30.9 25.1-56 56-56z"/></svg>',stopwatch:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M176 0c-17.7 0-32 14.3-32 32s14.3 32 32 32h16V98.4C92.3 113.8 16 200 16 304c0 114.9 93.1 208 208 208s208-93.1 208-208c0-41.8-12.3-80.7-33.5-113.2l24.1-24.1c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L352.7 146c-27.7-25.5-63.1-41-101.5-42.6V64h16c17.7 0 32-14.3 32-32s-14.3-32-32-32H176zM208 192v112c0 17.7 14.3 32 32 32s32-14.3 32-32V192c0-17.7-14.3-32-32-32s-32 14.3-32 32z"/></svg>',tomato:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M192 24c0-13.3 10.7-24 24-24h80c13.3 0 24 10.7 24 24s-10.7 24-24 24h-80c-13.3 0-24-10.7-24-24zM224 64h64c123.7 0 224 100.3 224 224v32c0 123.7-100.3 224-224 224H224C100.3 544 0 443.7 0 320V288C0 164.3 100.3 64 224 64zm0 64C135.6 128 64 199.6 64 288v32c0 88.4 71.6 160 160 160h64c88.4 0 160-71.6 160-160V288c0-88.4-71.6-160-160-160H224z"/></svg>',ellipsis:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 128 512"><path d="M64 360a56 56 0 1 0 0 112 56 56 0 1 0 0-112zm0-160a56 56 0 1 0 0 112 56 56 0 1 0 0-112zM120 96A56 56 0 1 0 8 96a56 56 0 1 0 112 0z"/></svg>',arrows:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M278.6 9.4c-12.5-12.5-32.8-12.5-45.3 0l-64 64c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l9.4-9.4V224H109.3l9.4-9.4c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-64 64c-12.5 12.5-12.5 32.8 0 45.3l64 64c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-9.4-9.4H224V402.7l-9.4-9.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l64 64c12.5 12.5 32.8 12.5 45.3 0l64-64c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-9.4 9.4V288H402.7l-9.4 9.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l64-64c12.5-12.5 12.5-32.8 0-45.3l-64-64c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l9.4 9.4H288V109.3l9.4 9.4c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-64-64z"/></svg>'};var zl=V("<span><!></span>");function Z(a,t){if(new.target)return et({component:Z,...a});Ge(t,!1);const e=$();let s=G(t,"name",12),n=G(t,"size",12,"1em"),r=G(t,"color",12,"currentColor"),l=G(t,"className",12,"");function c(f){if(!f)return"";const h=f.match(/viewBox="([^"]*)"/),_=h?h[1]:"0 0 512 512",[,,w,m]=_.split(" ").map(Number),E=24/w,D=24/m,g=Math.min(E,D),y=(24-w*g)/2,M=(24-m*g)/2,R=f.match(/<path[^>]*d="([^"]*)"[^>]*>/);if(!R)return f;const B=R[1];return`<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="1em" height="1em" fill="currentColor">
			<g transform="translate(${y}, ${M}) scale(${g})">
				<path d="${B}" />
			</g>
		</svg>`}Oe(()=>he(s()),()=>{b(e,c(Il[s()]||""))}),Ut(),St();var o=zl(),d=v(o);return Cl(d,()=>i(e)),u(o),Q(()=>{je(o,1,`anki-icon ${l()??""}`,"svelte-1yznn49"),Ur(o,`width: ${n()??""}; height: ${n()??""}; color: ${r()??""};`)}),O(a,o),Je({get name(){return s()},set name(f){s(f),K()},get size(){return n()},set size(f){n(f),K()},get color(){return r()},set color(f){r(f),K()},get className(){return l()},set className(f){l(f),K()},$set:at,$on:(f,h)=>tt(t,f,h)})}var Ll=V("<button><!> <span> </span></button>"),Fl=V('<nav class="anki-navbar"><div class="anki-nav-container"><div class="anki-nav-menu"></div></div></nav>');function Kr(a,t){if(new.target)return et({component:Kr,...a});Ge(t,!1);let e=G(t,"currentPage",12),s=G(t,"onNavigate",12);const n=[{id:"deck-study",icon:"play-circle",label:"牌组学习"},{id:"card-management",icon:"layer-group",label:"卡片管理"},{id:"ai-assistant",icon:"robot",label:"AI助手"},{id:"statistics",icon:"chart-line",label:"统计分析"}];function r(d){console.log("Nav clicked:",d),s()(d)}St();var l=Fl(),c=v(l),o=v(c);return Be(o,5,()=>n,$e,(d,f)=>{var h=Ll(),_=v(h);Z(_,{get name(){return i(f),x(()=>i(f).icon)},size:16});var w=p(_,2),m=v(w,!0);u(w),u(h),Q(()=>{je(h,1,`anki-nav-item ${he(e()),i(f),x(()=>e()===i(f).id?"active":"")??""}`,"svelte-1aze6gk"),Va(h,"data-page",(i(f),x(()=>i(f).id))),Y(m,(i(f),x(()=>i(f).label)))}),q("click",h,()=>r(i(f).id)),O(d,h)}),u(o),u(c),u(l),O(a,l),Je({get currentPage(){return e()},set currentPage(d){e(d),K()},get onNavigate(){return s()},set onNavigate(d){s(d),K()},$set:at,$on:(d,f)=>tt(t,d,f)})}var Ol=V("<button><i></i> <span> </span></button>"),Bl=V('<div class="anki-deck-menu-dropdown svelte-6zs28f"></div>'),ql=V('<div><div class="anki-deck-name"><span> </span></div> <div class="anki-deck-stats"><span class="anki-stat-number new-cards"> </span> <span class="anki-stat-number review-cards"> </span> <span class="anki-stat-number memory-rate"> </span></div> <div class="anki-deck-actions"><button class="anki-btn-study-deck">开始学习</button> <div class="anki-deck-menu svelte-6zs28f"><button class="anki-btn-deck-menu" title="更多选项"><i class="fas fa-ellipsis-v"></i></button> <!></div></div></div>');function Gr(a,t){if(new.target)return et({component:Gr,...a});Ge(t,!1);let e=G(t,"deck",12),s=G(t,"onStudy",12),n=G(t,"onAction",12);const r=[{id:"edit",icon:"fas fa-edit",label:"编辑牌组"},{id:"stats",icon:"fas fa-chart-bar",label:"查看统计"},{id:"sync",icon:"fas fa-sync",label:"同步数据"},{id:"delete",icon:"fas fa-trash",label:"删除牌组",danger:!0}];let l=$(!1),c=$();function o(I){n()(I),b(l,!1)}function d(){b(l,!i(l)),i(l)&&i(c)&&setTimeout(()=>{const I=i(c).getBoundingClientRect(),z=window.innerHeight;I.bottom>z-20?i(c).classList.add("menu-above"):i(c).classList.remove("menu-above")},0)}St();var f=ql(),h=v(f),_=v(h),w=v(_,!0);u(_),u(h);var m=p(h,2),E=v(m),D=v(E,!0);u(E);var g=p(E,2),y=v(g,!0);u(g);var M=p(g,2),R=v(M,!0);u(M),u(m);var B=p(m,2),T=v(B),F=p(T,2),ee=v(F),_e=p(ee,2);{var pe=I=>{var z=Bl();Be(z,5,()=>r,$e,(re,ie)=>{var ae=Ol(),ve=v(ae),fe=p(ve,2),me=v(fe,!0);u(fe),u(ae),Q(()=>{je(ae,1,`anki-menu-item ${i(ie),x(()=>i(ie).danger?"danger":"")??""}`),je(ve,1,Vr((i(ie),x(()=>i(ie).icon))),"svelte-6zs28f"),Y(me,(i(ie),x(()=>i(ie).label)))}),q("click",ae,()=>o(i(ie).id)),O(re,ae)}),u(z),jr(z,re=>b(c,re),()=>i(c)),O(I,z)};W(_e,I=>{i(l)&&I(pe)})}return u(F),u(B),u(f),Q(()=>{je(f,1,`anki-deck-item ${he(e()),x(()=>e().type==="main"?"main-deck":"sub-deck")??""}`,"svelte-6zs28f"),Y(w,(he(e()),x(()=>e().name))),Y(D,(he(e()),x(()=>e().stats.newCards))),Y(y,(he(e()),x(()=>e().stats.reviewCards))),Y(R,(he(e()),x(()=>e().stats.memoryRate)))}),q("click",T,function(...I){var z;(z=s())==null||z.apply(this,I)}),q("click",ee,d),O(a,f),Je({get deck(){return e()},set deck(I){e(I),K()},get onStudy(){return s()},set onStudy(I){s(I),K()},get onAction(){return n()},set onAction(I){n(I),K()},$set:at,$on:(I,z)=>tt(t,I,z)})}var Hl=V('<div class="anki-deck-list svelte-1j8i79"><div class="anki-deck-list-header"><div class="anki-deck-name-header">牌组</div> <div class="anki-deck-stats-header"><span class="anki-stat-header">未学习</span> <span class="anki-stat-header">学习中</span> <span class="anki-stat-header">待复习</span></div> <div class="anki-deck-actions-header">操作</div></div> <!></div>');function Jr(a,t){if(new.target)return et({component:Jr,...a});Ge(t,!1);const e=$();let s=G(t,"decks",12),n=G(t,"onStudyDeck",12),r=G(t,"onDeckAction",12);function l(d){const f=[];return d.forEach(h=>{f.push(h),h.subDecks&&h.subDecks.forEach(_=>{f.push(_)})}),f}Oe(()=>he(s()),()=>{b(e,l(s()))}),Ut(),St();var c=Hl(),o=p(v(c),2);return Be(o,1,()=>i(e),$e,(d,f)=>{Gr(d,{get deck(){return i(f)},onStudy:()=>n()(i(f).id),onAction:h=>r()(i(f).id,h)})}),u(c),O(a,c),Je({get decks(){return s()},set decks(d){s(d),K()},get onStudyDeck(){return n()},set onStudyDeck(d){n(d),K()},get onDeckAction(){return r()},set onDeckAction(d){r(d),K()},$set:at,$on:(d,f)=>tt(t,d,f)})}var Vl=V('<button class="anki-btn-primary add-deck-btn svelte-1m4gukh"><!> <span class="svelte-1m4gukh"> </span></button>'),Ul=V('<div class="anki-page-header svelte-1m4gukh"><div class="anki-page-title-section svelte-1m4gukh"><h1 class="anki-page-title svelte-1m4gukh"> </h1> <p class="anki-page-subtitle svelte-1m4gukh"> </p></div> <!></div>');function _s(a,t){if(new.target)return et({component:_s,...a});Ge(t,!1);const e=$();let s=G(t,"title",12),n=G(t,"subtitle",12),r=G(t,"buttonText",12,""),l=G(t,"buttonIcon",12,""),c=G(t,"onButtonClick",12,void 0);function o(g){return{"fas fa-plus":"add","fas fa-edit":"edit","fas fa-save":"save","fas fa-trash":"delete","fas fa-copy":"copy","fas fa-folder":"folder","fas fa-search":"search","fas fa-filter":"filter","fas fa-cog":"settings","fas fa-chart-line":"chart","fas fa-robot":"robot","fas fa-brain":"brain","fas fa-layer-group":"deck","fas fa-cards":"cards"}[g]||"add"}Oe(()=>he(l()),()=>{b(e,o(l()))}),Ut();var d=Ul(),f=v(d),h=v(f),_=v(h,!0);u(h);var w=p(h,2),m=v(w,!0);u(w),u(f);var E=p(f,2);{var D=g=>{var y=Vl(),M=v(y);{var R=F=>{Z(F,{get name(){return i(e)},size:"1rem"})};W(M,F=>{l()&&F(R)})}var B=p(M,2),T=v(B,!0);u(B),u(y),Q(()=>Y(T,r())),q("click",y,function(...F){var ee;(ee=c())==null||ee.apply(this,F)}),O(g,y)};W(E,g=>{r()&&c()&&g(D)})}return u(d),Q(()=>{Y(_,s()),Y(m,n())}),O(a,d),Je({get title(){return s()},set title(g){s(g),K()},get subtitle(){return n()},set subtitle(g){n(g),K()},get buttonText(){return r()},set buttonText(g){r(g),K()},get buttonIcon(){return l()},set buttonIcon(g){l(g),K()},get onButtonClick(){return c()},set onButtonClick(g){c(g),K()},$set:at,$on:(g,y)=>tt(t,g,y)})}var $l=V('<div class="menu-dropdown"><button class="menu-item" title="移动牌组"><!></button> <button class="menu-item" title="编辑卡片"><!></button> <button class="menu-item" title="查看详情"><!></button> <button class="menu-item" title="设置优先级"><!></button> <button class="menu-item danger" title="删除卡片"><!></button></div>'),jl=V('<label class="choice-item"><input type="radio"/> <span class="choice-text"> </span></label>'),Kl=V('<div class="choices"></div>'),Gl=V('<div class="fill-input"><input type="text" placeholder="请输入答案..." class="answer-input"/></div>'),Jl=V('<div class="qa-input"><textarea placeholder="请输入你的答案..." class="answer-textarea"></textarea></div>'),Wl=V('<button class="anki-btn-primary">提交答案</button>'),Yl=V('<div class="answer-section"><!> <div class="answer-actions"><button class="anki-btn-secondary">显示答案</button> <!></div></div>'),Xl=V('<div><span class="choice-text"> </span> <!></div>'),Ql=V('<div class="choice-result"></div>'),Zl=V("<p> </p>"),ec=V('<div class="answer-reveal"><div class="correct-answer"><h4>正确答案：</h4> <div class="answer-content"><!></div></div> <div class="difficulty-rating"><div class="difficulty-buttons"><button class="difficulty-btn easy"><div class="difficulty-content"><span class="difficulty-label">简单</span> <span class="next-review">1天后</span></div></button> <button class="difficulty-btn medium"><div class="difficulty-content"><span class="difficulty-label">一般</span> <span class="next-review">3天后</span></div></button> <button class="difficulty-btn hard"><div class="difficulty-content"><span class="difficulty-label">困难</span> <span class="next-review">10分钟后</span></div></button></div></div></div>'),tc=V('<div class="study-modal-overlay"><div class="study-modal"><div class="study-header"><div class="study-info"><div class="deck-info-row"><h2 class="deck-name"> </h2> <span class="accuracy"> </span></div></div> <div class="study-controls"><div class="timer-display"><div class="study-time"><!> <span> </span></div> <div class="card-time"><!> <span> </span></div></div> <div class="pomodoro-timer"><button aria-label="番茄钟计时器"><!> <span> </span></button></div> <div class="study-menu"><button class="menu-btn" aria-label="更多选项"><!></button> <!></div> <button class="close-btn" aria-label="关闭"><!></button></div></div> <div class="progress-container"><div class="progress-row"><div class="progress-bar"><div class="progress-fill"></div></div> <span class="card-progress"> </span></div></div> <div class="card-content"><div class="question-section"><h3><!></h3> <div> </div></div> <!></div></div></div>');function Wr(a,t){if(new.target)return et({component:Wr,...a});Ge(t,!1);const e=[];let s=G(t,"deck",12),n=G(t,"isOpen",12,!1),r=G(t,"onClose",12),l=$(0),c=$(!1),o=$(Date.now()),d=$(Date.now()),f=20,h=$(0),_=$(0),w=$(0),m=$(null),E=$(25*60),D=$(null),g=$(!1),y=$({id:"1",type:"qa",question:"什么是机器学习？",answer:"机器学习是人工智能的一个分支，它使计算机能够在没有明确编程的情况下从经验中学习和改进。",choices:["监督学习","无监督学习","强化学习","深度学习"],correctChoice:0,fillBlanks:["机器学习","人工智能"],difficulty:"medium"}),M=$(!1),R=$(),B=$(""),T=$(-1);function F(){i(m)!==null&&clearInterval(i(m)),b(m,setInterval(()=>{Za(_),Za(w)},1e3))}function ee(){b(g,!0),b(D,setInterval(()=>{Za(E,-1),i(E)<=0&&(b(g,!1),b(E,25*60),alert("番茄钟时间到！休息一下吧！"))},1e3))}function _e(){b(g,!1),i(D)!==null&&(clearInterval(i(D)),b(D,null)),b(E,25*60)}function pe(H){const X=Math.floor(H/60),we=H%60;return`${X.toString().padStart(2,"0")}:${we.toString().padStart(2,"0")}`}function I(){b(c,!0)}function z(H){(H==="easy"||H==="medium")&&Za(h),Za(l),b(c,!1),b(w,0),b(d,Date.now()),b(B,""),b(T,-1),i(l)>=f?ie():re()}function re(){const H=["qa","choice","fill"],X=H[Math.floor(Math.random()*H.length)];b(y,{id:(i(l)+1).toString(),type:X,question:`问题 ${i(l)+1}：这是一个${X==="qa"?"问答":X==="choice"?"选择":"填空"}题`,answer:`这是问题 ${i(l)+1} 的答案`,choices:X==="choice"?["选项A","选项B","选项C","选项D"]:[],correctChoice:X==="choice"?Math.floor(Math.random()*4):0,fillBlanks:X==="fill"?["空白1","空白2"]:[],difficulty:"medium"})}function ie(){const H=Math.floor((Date.now()-i(o))/1e3),X=Math.round(i(h)/f*100);alert(`学习完成！
总用时：${pe(H)}
正确率：${X}%`),r()()}function ae(H){switch(b(M,!1),H){case"move":console.log("移动牌组");break;case"edit":console.log("编辑卡片");break;case"detail":console.log("查看详情");break;case"delete":console.log("删除卡片");break;case"priority":console.log("设置优先级");break}}function ve(){b(M,!i(M)),i(M)&&i(R)&&setTimeout(()=>{const H=i(R).getBoundingClientRect(),X=window.innerHeight;H.bottom>X-20?i(R).classList.add("menu-above"):i(R).classList.remove("menu-above")},0)}function fe(){(i(y).type==="choice"&&i(T)>=0||i(y).type==="fill"&&i(B).trim()||i(y).type==="qa"&&i(B).trim())&&b(c,!0)}function me(H){if(n())switch(H.key){case"Escape":r()();break;case" ":i(c)||(H.preventDefault(),I());break;case"Enter":i(c)?(H.preventDefault(),z("medium")):i(y).type!=="choice"&&(H.preventDefault(),fe());break}}Ls(()=>{n()&&(b(_,0),b(w,0),b(o,Date.now()),b(d,Date.now()),F(),document.addEventListener("keydown",me))}),wl(()=>{i(m)!==null&&clearInterval(i(m)),i(D)!==null&&clearInterval(i(D)),document.removeEventListener("keydown",me)}),Oe(()=>(he(n()),i(m),i(D)),()=>{n()&&i(m)===null?(b(_,0),b(w,0),b(o,Date.now()),b(d,Date.now()),F(),document.addEventListener("keydown",me)):n()||(i(m)!==null&&(clearInterval(i(m)),b(m,null)),i(D)!==null&&(clearInterval(i(D)),b(D,null)),document.removeEventListener("keydown",me))}),Ut(),St();var be=Lt(),Pe=Ct(be);{var ge=H=>{var X=tc(),we=v(X),ke=v(we),Ae=v(ke),xe=v(Ae),ze=v(xe),st=v(ze,!0);u(ze);var Se=p(ze,2),N=v(Se);u(Se),u(xe),u(Ae);var S=p(Ae,2),P=v(S),k=v(P),U=v(k);Z(U,{name:"clock",size:14});var J=p(U,2),$t=v(J,!0);u(J),u(k);var nt=p(k,2),Ga=v(nt);Z(Ga,{name:"stopwatch",size:14});var ys=p(Ga,2),Fs=v(ys,!0);u(ys),u(nt),u(P);var Ja=p(P,2),xa=v(Ja),C=v(xa);Z(C,{name:"tomato",size:14});var L=p(C,2),Ee=v(L,!0);u(L),u(xa),u(Ja);var Dt=p(Ja,2),rt=v(Dt),We=v(rt);Z(We,{name:"ellipsis-v",size:14}),u(rt);var pt=p(rt,2);{var it=oe=>{var ce=$l(),De=v(ce),yt=v(De);Z(yt,{name:"arrows-alt",size:16}),u(De);var qe=p(De,2),He=v(qe);Z(He,{name:"edit",size:16}),u(qe);var Re=p(qe,2),Et=v(Re);Z(Et,{name:"info-circle",size:16}),u(Re);var lt=p(Re,2),Ce=v(lt);Z(Ce,{name:"star",size:16}),u(lt);var Te=p(lt,2),Kt=v(Te);Z(Kt,{name:"trash",size:16}),u(Te),u(ce),jr(ce,Ye=>b(R,Ye),()=>i(R)),q("click",De,()=>ae("move")),q("click",qe,()=>ae("edit")),q("click",Re,()=>ae("detail")),q("click",lt,()=>ae("priority")),q("click",Te,()=>ae("delete")),O(oe,ce)};W(pt,oe=>{i(M)&&oe(it)})}u(Dt);var mt=p(Dt,2),Nt=v(mt);Z(Nt,{name:"times",size:16}),u(mt),u(S),u(ke);var Le=p(ke,2),ta=v(Le),wt=v(ta),Sa=v(wt);u(wt);var jt=p(wt,2),Tt=v(jt);u(jt),u(ta),u(Le);var _t=p(Le,2),aa=v(_t),Pt=v(aa),fa=v(Pt);{var Os=oe=>{var ce=js("问答题");O(oe,ce)},Wa=oe=>{var ce=Lt(),De=Ct(ce);{var yt=He=>{var Re=js("选择题");O(He,Re)},qe=He=>{var Re=Lt(),Et=Ct(Re);{var lt=Ce=>{var Te=js("填空题");O(Ce,Te)};W(Et,Ce=>{i(y),x(()=>i(y).type==="fill")&&Ce(lt)},!0)}O(He,Re)};W(De,He=>{i(y),x(()=>i(y).type==="choice")?He(yt):He(qe,!1)},!0)}O(oe,ce)};W(fa,oe=>{i(y),x(()=>i(y).type==="qa")?oe(Os):oe(Wa,!1)})}u(Pt);var Da=p(Pt,2),Bs=v(Da,!0);u(Da),u(aa);var Ya=p(aa,2);{var bs=oe=>{var ce=Yl(),De=v(ce);{var yt=Ce=>{var Te=Kl();Be(Te,5,()=>(i(y),x(()=>i(y).choices)),$e,(Kt,Ye,ct)=>{var Xe=jl(),Qe=v(Xe);At(Qe),Qe.value=Qe.__value=ct;var ot=p(Qe,2),Rt=v(ot,!0);u(ot),u(Xe),Q(()=>Y(Rt,i(Ye))),Pl(e,[],Qe,()=>i(T),Gt=>b(T,Gt)),O(Kt,Xe)}),u(Te),O(Ce,Te)},qe=Ce=>{var Te=Lt(),Kt=Ct(Te);{var Ye=Xe=>{var Qe=Gl(),ot=v(Qe);At(ot),u(Qe),ba(ot,()=>i(B),Rt=>b(B,Rt)),O(Xe,Qe)},ct=Xe=>{var Qe=Lt(),ot=Ct(Qe);{var Rt=Gt=>{var Xa=Jl(),ks=v(Xa);Ps(ks),u(Xa),ba(ks,()=>i(B),Hs=>b(B,Hs)),O(Gt,Xa)};W(ot,Gt=>{i(y),x(()=>i(y).type==="qa")&&Gt(Rt)},!0)}O(Xe,Qe)};W(Kt,Xe=>{i(y),x(()=>i(y).type==="fill")?Xe(Ye):Xe(ct,!1)},!0)}O(Ce,Te)};W(De,Ce=>{i(y),x(()=>i(y).type==="choice")?Ce(yt):Ce(qe,!1)})}var He=p(De,2),Re=v(He),Et=p(Re,2);{var lt=Ce=>{var Te=Wl();q("click",Te,fe),O(Ce,Te)};W(Et,Ce=>{i(y),i(B),x(()=>i(y).type!=="qa"||i(B).trim())&&Ce(lt)})}u(He),u(ce),q("click",Re,I),O(oe,ce)},qs=oe=>{var ce=ec(),De=v(ce),yt=p(v(De),2),qe=v(yt);{var He=Ye=>{var ct=Ql();Be(ct,5,()=>(i(y),x(()=>i(y).choices)),$e,(Xe,Qe,ot)=>{var Rt=Xl(),Gt=v(Rt),Xa=v(Gt,!0);u(Gt);var ks=p(Gt,2);{var Hs=Ta=>{Z(Ta,{name:"check",size:16})},ri=Ta=>{var Rn=Lt(),ii=Ct(Rn);{var li=Vs=>{Z(Vs,{name:"times",size:16})};W(ii,Vs=>{ot===i(T)&&Vs(li)},!0)}O(Ta,Rn)};W(ks,Ta=>{i(y),x(()=>ot===i(y).correctChoice)?Ta(Hs):Ta(ri,!1)})}u(Rt),Q(()=>{je(Rt,1,`choice-item ${i(y),x(()=>ot===i(y).correctChoice?"correct":"")??""} ${i(T),i(y),x(()=>ot===i(T)&&ot!==i(y).correctChoice?"wrong":"")??""}`),Y(Xa,i(Qe))}),O(Xe,Rt)}),u(ct),O(Ye,ct)},Re=Ye=>{var ct=Zl(),Xe=v(ct,!0);u(ct),Q(()=>Y(Xe,(i(y),x(()=>i(y).answer)))),O(Ye,ct)};W(qe,Ye=>{i(y),x(()=>i(y).type==="choice")?Ye(He):Ye(Re,!1)})}u(yt),u(De);var Et=p(De,2),lt=v(Et),Ce=v(lt),Te=p(Ce,2),Kt=p(Te,2);u(lt),u(Et),u(ce),q("click",Ce,()=>z("easy")),q("click",Te,()=>z("medium")),q("click",Kt,()=>z("hard")),O(oe,ce)};W(Ya,oe=>{i(c)?oe(qs,!1):oe(bs)})}u(_t),u(we),u(X),Q((oe,ce,De,yt)=>{Y(st,(he(s()),x(()=>s().name))),Y(N,`${oe??""}% 正确`),Y($t,ce),Y(Fs,De),je(xa,1,`pomodoro-btn ${i(g)?"active":""}`),Y(Ee,yt),Ur(Sa,`width: ${i(l)/f*100}%`),Y(Tt,`${i(l)+1} / 20`),je(Pt,1,`question-title ${i(y),x(()=>i(y).type)??""}`),je(Da,1,`question-text ${i(y),x(()=>i(y).type)??""}`),Y(Bs,(i(y),x(()=>i(y).question)))},[()=>(i(h),i(l),x(()=>Math.round(i(h)/Math.max(i(l),1)*100))),()=>(i(_),x(()=>pe(i(_)))),()=>(i(w),x(()=>pe(i(w)))),()=>(i(E),x(()=>pe(i(E))))]),q("click",xa,function(...oe){var ce;(ce=i(g)?_e:ee)==null||ce.apply(this,oe)}),q("click",rt,ve),q("click",mt,function(...oe){var ce;(ce=r())==null||ce.apply(this,oe)}),q("click",we,An(function(oe){Pn.call(this,t,oe)})),q("click",X,function(...oe){var ce;(ce=r())==null||ce.apply(this,oe)}),O(H,X)};W(Pe,H=>{n()&&H(ge)})}return O(a,be),Je({get deck(){return s()},set deck(H){s(H),K()},get isOpen(){return n()},set isOpen(H){n(H),K()},get onClose(){return r()},set onClose(H){r(H),K()},$set:at,$on:(H,X)=>tt(t,H,X)})}var ac=V('<div class="loading-container svelte-ruuslx"><div class="loading-spinner svelte-ruuslx"><i class="fas fa-spinner fa-spin"></i></div> <p class="svelte-ruuslx">正在加载牌组数据...</p></div>'),sc=V('<div id="deck-study" class="anki-page active svelte-ruuslx"><!> <!> <!></div>');function Yr(a,t){if(new.target)return et({component:Yr,...a});Ge(t,!1);const e=$(),s=$();let n=G(t,"app",12),r=G(t,"plugin",12),l=$(!1),c=$(null);async function o(){var M;console.log("Create new deck"),(M=n().workspace.activeLeaf)==null||M.view.containerEl.createEl("div",{text:"Deck creation feature coming soon!"})}function d(M){console.log("Study deck:",M);const R=i(e).find(B=>B.id===M);R&&(b(c,R),b(l,!0),le.startStudySession(M))}async function f(M,R){switch(console.log("Deck action:",M,R),R){case"edit":break;case"stats":break;case"sync":try{await r().ankiConnect.sync(),await r().loadDecksFromAnki()}catch(B){console.error("Sync failed:",B)}break}}function h(){b(l,!1),b(c,null),le.endStudySession()}Oe(()=>le,()=>{b(e,le.decks.length>0?le.decks:[{id:"english-vocab",name:"英语词汇",type:"main",stats:{newCards:25,reviewCards:8,memoryRate:12},subDecks:[{id:"basic-vocab",name:"基础词汇",type:"sub",stats:{newCards:15,reviewCards:5,memoryRate:8}},{id:"advanced-vocab",name:"高级词汇",type:"sub",stats:{newCards:10,reviewCards:3,memoryRate:4}}]},{id:"japanese-grammar",name:"日语语法",type:"main",stats:{newCards:8,reviewCards:15,memoryRate:23}},{id:"computer-science",name:"计算机科学",type:"main",stats:{newCards:1,reviewCards:2,memoryRate:7}},{id:"math-formulas",name:"数学公式",type:"main",stats:{newCards:8,reviewCards:3,memoryRate:5}}])}),Oe(()=>le,()=>{b(s,le.isLoading)}),Ut(),St();var _=sc(),w=v(_);_s(w,{title:"牌组学习",subtitle:"选择一个牌组开始学习，AI将根据遗忘曲线为您智能安排复习 - 开发模式测试",buttonText:"创建新牌组",buttonIcon:"fas fa-plus",onButtonClick:o});var m=p(w,2);{var E=M=>{var R=ac();O(M,R)},D=M=>{Jr(M,{get decks(){return i(e)},onStudyDeck:d,onDeckAction:f})};W(m,M=>{i(s)?M(E):M(D,!1)})}var g=p(m,2);{var y=M=>{Wr(M,{get deck(){return i(c)},get isOpen(){return i(l)},onClose:h})};W(g,M=>{i(c)&&M(y)})}return u(_),O(a,_),Je({get app(){return n()},set app(M){n(M),K()},get plugin(){return r()},set plugin(M){r(M),K()},$set:at,$on:(M,R)=>tt(t,M,R)})}var nc=V('<div class="batch-operations-header svelte-1i55g2r"><div class="table-info svelte-1i55g2r"><span class="selected-count svelte-1i55g2r"> </span></div> <div class="batch-actions svelte-1i55g2r"><button class="anki-btn-secondary"><!> 批量编辑</button> <button class="anki-btn-secondary"><!> 移动到牌组</button> <button class="anki-btn-danger"><!> 批量删除</button></div></div>'),rc=V('<tr><td class="checkbox-column svelte-1i55g2r"><input type="checkbox"/></td><td class="front-cell svelte-1i55g2r"><div class="front-content svelte-1i55g2r"> </div></td><td class="back-cell svelte-1i55g2r"><div class="content-preview svelte-1i55g2r"> </div></td><td class="deck-cell svelte-1i55g2r"><span class="deck-name svelte-1i55g2r"> </span></td><td class="type-cell svelte-1i55g2r"><span class="card-type-badge svelte-1i55g2r"> </span></td><td class="difficulty-cell svelte-1i55g2r"><span> </span></td><td class="review-count-cell svelte-1i55g2r"><span class="review-count svelte-1i55g2r"> </span></td><td class="date-cell svelte-1i55g2r"><span class="date-text svelte-1i55g2r"> </span></td><td class="actions-cell svelte-1i55g2r"><div class="action-buttons svelte-1i55g2r"><button class="action-btn edit-btn svelte-1i55g2r" title="编辑" aria-label="编辑卡片"><!></button> <button class="action-btn view-btn svelte-1i55g2r" title="查看详情" aria-label="查看卡片详情"><!></button> <button class="action-btn delete-btn svelte-1i55g2r" title="删除" aria-label="删除卡片"><!></button></div></td></tr>'),ic=V('<div class="empty-state svelte-1i55g2r"><!> <h3 class="svelte-1i55g2r">暂无卡片</h3> <p>还没有创建任何卡片，点击"添加卡片"开始创建吧！</p></div>'),lc=V("<button> </button>"),cc=V('<div class="pagination svelte-1i55g2r"><div class="pagination-info svelte-1i55g2r"> </div> <div class="pagination-controls svelte-1i55g2r"><button class="pagination-btn svelte-1i55g2r" aria-label="跳转到第一页"><!></button> <button class="pagination-btn svelte-1i55g2r" aria-label="上一页"><!></button> <!> <button class="pagination-btn svelte-1i55g2r" aria-label="下一页"><!></button> <button class="pagination-btn svelte-1i55g2r" aria-label="跳转到最后一页"><!></button></div></div>'),oc=V('<div class="card-table-wrapper svelte-1i55g2r"><!> <div class="table-container svelte-1i55g2r"><table class="card-table svelte-1i55g2r"><thead><tr><th class="checkbox-column svelte-1i55g2r"><input type="checkbox"/></th><th class="sortable front-cell svelte-1i55g2r">正面 <!></th><th class="sortable back-cell svelte-1i55g2r">反面 <!></th><th class="sortable deck-cell svelte-1i55g2r">牌组 <!></th><th class="sortable type-cell svelte-1i55g2r" style="text-align: center;">类型 <!></th><th class="sortable difficulty-cell svelte-1i55g2r" style="text-align: center;">难度 <!></th><th class="sortable review-count-cell svelte-1i55g2r" style="text-align: center;">复习次数 <!></th><th class="sortable date-cell svelte-1i55g2r">创建时间 <!></th><th class="actions-cell svelte-1i55g2r" style="text-align: center;">操作</th></tr></thead><tbody></tbody></table> <!></div> <!></div>');function Xr(a,t){if(new.target)return et({component:Xr,...a});Ge(t,!1);const e=$(),s=$(),n=$(),r=$();let l=G(t,"cards",28,()=>[]),c=G(t,"decks",28,()=>[]),o=G(t,"selectedCards",28,()=>[]),d=G(t,"sortBy",12,"created"),f=G(t,"sortOrder",12,"desc"),h=G(t,"currentPage",12,1),_=G(t,"pageSize",12,20);const w=Mn();function m(C){d()===C?f(f()==="asc"?"desc":"asc"):(d(C),f("asc")),w("sort",{sortBy:d(),sortOrder:f()})}function E(C){w("select",{cardId:C})}function D(){i(r).every(L=>o().includes(L.id))?w("selectAll",{selected:!1,cards:i(r).map(L=>L.id)}):w("selectAll",{selected:!0,cards:i(r).map(L=>L.id)})}function g(C){const L=c().find(Ee=>Ee.id===C);return(L==null?void 0:L.name)||"未知牌组"}function y(C){return C?new Intl.DateTimeFormat("zh-CN",{year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit"}).format(C):"-"}function M(C){switch(C){case"easy":return"difficulty-easy";case"medium":return"difficulty-medium";case"hard":return"difficulty-hard";default:return"difficulty-medium"}}function R(C){switch(C){case"fill":return"填空题";case"choice":return"选择题";case"qa":return"问答题";default:return"问答题"}}function B(C){C>=1&&C<=i(e)&&(h(C),w("pageChange",{page:C}))}function T(C){w("edit",{card:C})}function F(C){w("delete",{card:C})}function ee(C){w("view",{card:C})}Oe(()=>(he(l()),he(_())),()=>{b(e,Math.ceil(l().length/_()))}),Oe(()=>(he(h()),he(_())),()=>{b(s,(h()-1)*_())}),Oe(()=>(i(s),he(_()),he(l())),()=>{b(n,Math.min(i(s)+_(),l().length))}),Oe(()=>(he(l()),i(s),i(n)),()=>{b(r,l().slice(i(s),i(n)))}),Ut(),St();var _e=oc(),pe=v(_e);{var I=C=>{var L=nc(),Ee=v(L),Dt=v(Ee),rt=v(Dt);u(Dt),u(Ee);var We=p(Ee,2),pt=v(We),it=v(pt);Z(it,{name:"edit",size:"0.875rem"}),dt(),u(pt);var mt=p(pt,2),Nt=v(mt);Z(Nt,{name:"folder",size:"0.875rem"}),dt(),u(mt);var Le=p(mt,2),ta=v(Le);Z(ta,{name:"delete",size:"0.875rem"}),dt(),u(Le),u(We),u(L),Q(()=>Y(rt,`已选择 ${he(o()),x(()=>o().length)??""} 张`)),q("click",pt,()=>w("batchEdit")),q("click",mt,()=>w("batchMove")),q("click",Le,()=>w("batchDelete")),O(C,L)};W(pe,C=>{he(o()),x(()=>o().length>0)&&C(I)})}var z=p(pe,2),re=v(z),ie=v(re),ae=v(ie),ve=v(ae),fe=v(ve);At(fe),u(ve);var me=p(ve),be=p(v(me));{var Pe=C=>{{let L=zt(()=>f()==="asc"?"sortUp":"sortDown");Z(C,{get name(){return i(L)},size:"0.75rem"})}};W(be,C=>{d()==="front"&&C(Pe)})}u(me);var ge=p(me),H=p(v(ge));{var X=C=>{{let L=zt(()=>f()==="asc"?"sortUp":"sortDown");Z(C,{get name(){return i(L)},size:"0.75rem"})}};W(H,C=>{d()==="back"&&C(X)})}u(ge);var we=p(ge),ke=p(v(we));{var Ae=C=>{{let L=zt(()=>f()==="asc"?"sortUp":"sortDown");Z(C,{get name(){return i(L)},size:"0.75rem"})}};W(ke,C=>{d()==="deckId"&&C(Ae)})}u(we);var xe=p(we),ze=p(v(xe));{var st=C=>{{let L=zt(()=>f()==="asc"?"sortUp":"sortDown");Z(C,{get name(){return i(L)},size:"0.75rem"})}};W(ze,C=>{d()==="cardType"&&C(st)})}u(xe);var Se=p(xe),N=p(v(Se));{var S=C=>{{let L=zt(()=>f()==="asc"?"sortUp":"sortDown");Z(C,{get name(){return i(L)},size:"0.75rem"})}};W(N,C=>{d()==="difficulty"&&C(S)})}u(Se);var P=p(Se),k=p(v(P));{var U=C=>{{let L=zt(()=>f()==="asc"?"sortUp":"sortDown");Z(C,{get name(){return i(L)},size:"0.75rem"})}};W(k,C=>{d()==="reviewCount"&&C(U)})}u(P);var J=p(P),$t=p(v(J));{var nt=C=>{{let L=zt(()=>f()==="asc"?"sortUp":"sortDown");Z(C,{get name(){return i(L)},size:"0.75rem"})}};W($t,C=>{d()==="created"&&C(nt)})}u(J),dt(),u(ae),u(ie);var Ga=p(ie);Be(Ga,5,()=>i(r),C=>C.id,(C,L)=>{var Ee=rc();let Dt;var rt=v(Ee),We=v(rt);At(We),u(rt);var pt=p(rt),it=v(pt),mt=v(it,!0);u(it),u(pt);var Nt=p(pt),Le=v(Nt),ta=v(Le,!0);u(Le),u(Nt);var wt=p(Nt),Sa=v(wt),jt=v(Sa,!0);u(Sa),u(wt);var Tt=p(wt),_t=v(Tt),aa=v(_t,!0);u(_t),u(Tt);var Pt=p(Tt),fa=v(Pt),Os=v(fa,!0);u(fa),u(Pt);var Wa=p(Pt),Da=v(Wa),Bs=v(Da,!0);u(Da),u(Wa);var Ya=p(Wa),bs=v(Ya),qs=v(bs,!0);u(bs),u(Ya);var oe=p(Ya),ce=v(oe),De=v(ce),yt=v(De);Z(yt,{name:"edit",size:"0.75rem"}),u(De);var qe=p(De,2),He=v(qe);Z(He,{name:"info",size:"0.75rem"}),u(qe);var Re=p(qe,2),Et=v(Re);Z(Et,{name:"delete",size:"0.75rem"}),u(Re),u(ce),u(oe),u(Ee),Q((lt,Ce,Te,Kt,Ye,ct)=>{Dt=je(Ee,1,"card-row svelte-1i55g2r",null,Dt,lt),ns(We,Ce),Va(it,"title",(i(L),x(()=>i(L).front))),Y(mt,(i(L),x(()=>i(L).front))),Va(Le,"title",(i(L),x(()=>i(L).back))),Y(ta,(i(L),x(()=>i(L).back))),Y(jt,Te),Y(aa,Kt),je(fa,1,`difficulty-badge ${Ye??""}`,"svelte-1i55g2r"),Y(Os,(i(L),x(()=>i(L).difficulty))),Y(Bs,(i(L),x(()=>i(L).reviewCount||0))),Y(qs,ct)},[()=>({selected:o().includes(i(L).id)}),()=>(he(o()),i(L),x(()=>o().includes(i(L).id))),()=>(i(L),x(()=>g(i(L).deckId))),()=>(i(L),x(()=>R(i(L).cardType))),()=>(i(L),x(()=>M(i(L).difficulty))),()=>(i(L),x(()=>y(i(L).created)))]),q("change",We,()=>E(i(L).id)),q("click",De,()=>T(i(L))),q("click",qe,()=>ee(i(L))),q("click",Re,()=>F(i(L))),O(C,Ee)}),u(Ga),u(re);var ys=p(re,2);{var Fs=C=>{var L=ic(),Ee=v(L);Z(Ee,{name:"cards",size:"3rem",className:"empty-icon"}),dt(4),u(L),O(C,L)};W(ys,C=>{i(r),x(()=>i(r).length===0)&&C(Fs)})}u(z);var Ja=p(z,2);{var xa=C=>{var L=cc(),Ee=v(L),Dt=v(Ee);u(Ee);var rt=p(Ee,2),We=v(rt),pt=v(We);Z(pt,{name:"angleDoubleLeft",size:"0.875rem"}),u(We);var it=p(We,2),mt=v(it);Z(mt,{name:"angleLeft",size:"0.875rem"}),u(it);var Nt=p(it,2);Be(Nt,1,()=>(i(e),he(h()),x(()=>Array.from({length:Math.min(5,i(e))},(jt,Tt)=>Math.max(1,h()-2)+Tt).filter(jt=>jt<=i(e)))),$e,(jt,Tt)=>{var _t=lc();let aa;var Pt=v(_t,!0);u(_t),Q(fa=>{aa=je(_t,1,"pagination-btn page-btn svelte-1i55g2r",null,aa,fa),Y(Pt,i(Tt))},[()=>({active:i(Tt)===h()})]),q("click",_t,()=>B(i(Tt))),O(jt,_t)});var Le=p(Nt,2),ta=v(Le);Z(ta,{name:"angleRight",size:"0.875rem"}),u(Le);var wt=p(Le,2),Sa=v(wt);Z(Sa,{name:"angleDoubleRight",size:"0.875rem"}),u(wt),u(rt),u(L),Q(()=>{Y(Dt,`显示 ${i(s)+1}-${i(n)??""} 条，共 ${he(l()),x(()=>l().length)??""} 条`),We.disabled=h()===1,it.disabled=h()===1,Le.disabled=h()===i(e),wt.disabled=h()===i(e)}),q("click",We,()=>B(1)),q("click",it,()=>B(h()-1)),q("click",Le,()=>B(h()+1)),q("click",wt,()=>B(i(e))),O(C,L)};W(Ja,C=>{i(e)>1&&C(xa)})}return u(_e),Q(C=>ns(fe,C),[()=>(i(r),he(o()),x(()=>i(r).length>0&&i(r).every(C=>o().includes(C.id))))]),q("change",fe,D),q("click",me,()=>m("front")),q("click",ge,()=>m("back")),q("click",we,()=>m("deckId")),q("click",xe,()=>m("cardType")),q("click",Se,()=>m("difficulty")),q("click",P,()=>m("reviewCount")),q("click",J,()=>m("created")),O(a,_e),Je({get cards(){return l()},set cards(C){l(C),K()},get decks(){return c()},set decks(C){c(C),K()},get selectedCards(){return o()},set selectedCards(C){o(C),K()},get sortBy(){return d()},set sortBy(C){d(C),K()},get sortOrder(){return f()},set sortOrder(C){f(C),K()},get currentPage(){return h()},set currentPage(C){h(C),K()},get pageSize(){return _()},set pageSize(C){_(C),K()},$set:at,$on:(C,L)=>tt(t,C,L)})}var uc=V('<option class="svelte-18gr2f"> </option>'),dc=V('<option class="svelte-18gr2f"> </option>'),vc=V('<option class="svelte-18gr2f"> </option>'),fc=V('<option class="svelte-18gr2f"> </option>'),hc=V('<option class="svelte-18gr2f"> </option>'),gc=V('<div class="filter-overlay svelte-18gr2f" role="dialog" aria-modal="true" aria-labelledby="filter-title"><div class="filter-panel svelte-18gr2f"><div class="filter-header svelte-18gr2f"><h3 id="filter-title" class="svelte-18gr2f">筛选卡片</h3> <button class="close-btn svelte-18gr2f" aria-label="关闭筛选面板"><!></button></div> <div class="filter-content svelte-18gr2f"><div class="filter-group svelte-18gr2f"><label for="deck-filter" class="svelte-18gr2f">牌组</label> <select id="deck-filter" class="svelte-18gr2f"><option class="svelte-18gr2f">全部牌组</option><!></select></div> <div class="filter-group svelte-18gr2f"><label for="type-filter" class="svelte-18gr2f">卡片类型</label> <select id="type-filter" class="svelte-18gr2f"></select></div> <div class="filter-group svelte-18gr2f"><label for="difficulty-filter" class="svelte-18gr2f">难度</label> <select id="difficulty-filter" class="svelte-18gr2f"></select></div> <div class="filter-group svelte-18gr2f"><label for="date-filter" class="svelte-18gr2f">创建时间</label> <select id="date-filter" class="svelte-18gr2f"></select></div> <div class="filter-group svelte-18gr2f"><label for="review-filter" class="svelte-18gr2f">复习状态</label> <select id="review-filter" class="svelte-18gr2f"></select></div> <div class="filter-group svelte-18gr2f"><label for="tags-filter" class="svelte-18gr2f">标签</label> <input id="tags-filter" type="text" placeholder="输入标签，用逗号分隔" class="svelte-18gr2f"/></div></div> <div class="filter-actions svelte-18gr2f"><button class="reset-btn svelte-18gr2f"><!> 重置</button> <button class="apply-btn svelte-18gr2f"><!> 应用筛选</button></div></div></div>'),pc=V('<span class="filter-count svelte-18gr2f"> </span>'),mc=V('<!> <button aria-label="打开筛选面板"><!> 筛选 <!></button>',1);function Qr(a,t){if(new.target)return et({component:Qr,...a});Ge(t,!1);const e=$();let s=G(t,"decks",28,()=>[]),n=G(t,"isOpen",12,!1),r=G(t,"filters",28,()=>({deckId:"",cardType:"",difficulty:"",dateRange:"",hasReviews:"",tags:""}));const l=Mn(),c=[{value:"",label:"全部类型"},{value:"fill",label:"填空题"},{value:"choice",label:"选择题"},{value:"qa",label:"问答题"}],o=[{value:"",label:"全部难度"},{value:"easy",label:"简单"},{value:"medium",label:"中等"},{value:"hard",label:"困难"}],d=[{value:"",label:"全部时间"},{value:"today",label:"今天"},{value:"week",label:"本周"},{value:"month",label:"本月"},{value:"custom",label:"自定义"}],f=[{value:"",label:"全部卡片"},{value:"reviewed",label:"已复习"},{value:"not-reviewed",label:"未复习"}];function h(){l("filter",r()),n(!1)}function _(){r({deckId:"",cardType:"",difficulty:"",dateRange:"",hasReviews:"",tags:""}),l("filter",r())}function w(){n(!1)}Oe(()=>he(r()),()=>{b(e,Object.values(r()).filter(T=>T!=="").length)}),Ut(),St();var m=mc(),E=Ct(m);{var D=T=>{var F=gc(),ee=v(F),_e=v(ee),pe=p(v(_e),2),I=v(pe);Z(I,{name:"close",size:"1rem"}),u(pe),u(_e);var z=p(_e,2),re=v(z),ie=p(v(re),2);Q(()=>{r(),na(()=>{s()})});var ae=v(ie);ae.value=ae.__value="";var ve=p(ae);Be(ve,1,s,$e,(S,P)=>{var k=uc(),U=v(k,!0);u(k);var J={};Q(()=>{Y(U,(i(P),x(()=>i(P).name))),J!==(J=(i(P),x(()=>i(P).id)))&&(k.value=(k.__value=(i(P),x(()=>i(P).id)))??"")}),O(S,k)}),u(ie),u(re);var fe=p(re,2),me=p(v(fe),2);Q(()=>{r(),na(()=>{})}),Be(me,5,()=>c,$e,(S,P)=>{var k=dc(),U=v(k,!0);u(k);var J={};Q(()=>{Y(U,(i(P),x(()=>i(P).label))),J!==(J=(i(P),x(()=>i(P).value)))&&(k.value=(k.__value=(i(P),x(()=>i(P).value)))??"")}),O(S,k)}),u(me),u(fe);var be=p(fe,2),Pe=p(v(be),2);Q(()=>{r(),na(()=>{})}),Be(Pe,5,()=>o,$e,(S,P)=>{var k=vc(),U=v(k,!0);u(k);var J={};Q(()=>{Y(U,(i(P),x(()=>i(P).label))),J!==(J=(i(P),x(()=>i(P).value)))&&(k.value=(k.__value=(i(P),x(()=>i(P).value)))??"")}),O(S,k)}),u(Pe),u(be);var ge=p(be,2),H=p(v(ge),2);Q(()=>{r(),na(()=>{})}),Be(H,5,()=>d,$e,(S,P)=>{var k=fc(),U=v(k,!0);u(k);var J={};Q(()=>{Y(U,(i(P),x(()=>i(P).label))),J!==(J=(i(P),x(()=>i(P).value)))&&(k.value=(k.__value=(i(P),x(()=>i(P).value)))??"")}),O(S,k)}),u(H),u(ge);var X=p(ge,2),we=p(v(X),2);Q(()=>{r(),na(()=>{})}),Be(we,5,()=>f,$e,(S,P)=>{var k=hc(),U=v(k,!0);u(k);var J={};Q(()=>{Y(U,(i(P),x(()=>i(P).label))),J!==(J=(i(P),x(()=>i(P).value)))&&(k.value=(k.__value=(i(P),x(()=>i(P).value)))??"")}),O(S,k)}),u(we),u(X);var ke=p(X,2),Ae=p(v(ke),2);At(Ae),u(ke),u(z);var xe=p(z,2),ze=v(xe),st=v(ze);Z(st,{name:"undo",size:"0.875rem"}),dt(),u(ze);var Se=p(ze,2),N=v(Se);Z(N,{name:"check",size:"0.875rem"}),dt(),u(Se),u(xe),u(ee),u(F),q("click",pe,w),ra(ie,()=>r().deckId,S=>r(r().deckId=S,!0)),ra(me,()=>r().cardType,S=>r(r().cardType=S,!0)),ra(Pe,()=>r().difficulty,S=>r(r().difficulty=S,!0)),ra(H,()=>r().dateRange,S=>r(r().dateRange=S,!0)),ra(we,()=>r().hasReviews,S=>r(r().hasReviews=S,!0)),ba(Ae,()=>r().tags,S=>r(r().tags=S,!0)),q("click",ze,_),q("click",Se,h),q("click",ee,An(function(S){Pn.call(this,t,S)})),q("click",F,w),q("keydown",F,S=>S.key==="Escape"&&w()),O(T,F)};W(E,T=>{n()&&T(D)})}var g=p(E,2);let y;var M=v(g);Z(M,{name:"filter",size:"0.875rem"});var R=p(M,2);{var B=T=>{var F=pc(),ee=v(F,!0);u(F),Q(()=>Y(ee,i(e))),O(T,F)};W(R,T=>{i(e)>0&&T(B)})}return u(g),Q(T=>y=je(g,1,"filter-trigger svelte-18gr2f",null,y,T),[()=>({active:n(),"has-filters":i(e)>0})]),q("click",g,()=>n(!n())),O(a,m),Je({get decks(){return s()},set decks(T){s(T),K()},get isOpen(){return n()},set isOpen(T){n(T),K()},get filters(){return r()},set filters(T){r(T),K()},$set:at,$on:(T,F)=>tt(t,T,F)})}var wc=V('<option class="svelte-eyquaa"> </option>'),_c=V('<option class="svelte-eyquaa"> </option>'),yc=V('<option class="svelte-eyquaa"> </option>'),bc=V('<button class="delete-btn svelte-eyquaa"><i class="fas fa-trash"></i> 删除</button>'),kc=V('<div class="modal-overlay svelte-eyquaa" role="dialog" aria-modal="true" aria-labelledby="modal-title" tabindex="-1"><div class="modal-content svelte-eyquaa"><div class="modal-header svelte-eyquaa"><h2 id="modal-title" class="svelte-eyquaa"> </h2> <button class="close-btn svelte-eyquaa" aria-label="关闭对话框"><!></button></div> <div class="modal-body svelte-eyquaa"><form><div class="form-group svelte-eyquaa"><label for="card-front" class="svelte-eyquaa">卡片正面 *</label> <textarea id="card-front" placeholder="输入问题或提示..." rows="3" required class="svelte-eyquaa"></textarea></div> <div class="form-group svelte-eyquaa"><label for="card-back" class="svelte-eyquaa">卡片反面 *</label> <textarea id="card-back" placeholder="输入答案或解释..." rows="3" required class="svelte-eyquaa"></textarea></div> <div class="form-group svelte-eyquaa"><label for="card-deck" class="svelte-eyquaa">目标牌组 *</label> <select id="card-deck" required class="svelte-eyquaa"><option class="svelte-eyquaa">请选择牌组</option><!></select></div> <div class="form-row svelte-eyquaa"><div class="form-group svelte-eyquaa"><label for="card-type" class="svelte-eyquaa">卡片类型</label> <select id="card-type" class="svelte-eyquaa"></select></div> <div class="form-group svelte-eyquaa"><label for="card-difficulty" class="svelte-eyquaa">难度</label> <select id="card-difficulty" class="svelte-eyquaa"></select></div></div> <div class="form-group svelte-eyquaa"><label for="card-tags" class="svelte-eyquaa">标签</label> <input id="card-tags" type="text" placeholder="输入标签，用逗号分隔" class="svelte-eyquaa"/> <small class="svelte-eyquaa">例如：数学, 几何, 重要</small></div></form></div> <div class="modal-footer svelte-eyquaa"><div class="footer-left svelte-eyquaa"><!></div> <div class="footer-right svelte-eyquaa"><button class="cancel-btn svelte-eyquaa">取消</button> <button class="save-btn svelte-eyquaa"><i class="fas fa-save"></i> </button></div></div></div></div>');function Zr(a,t){if(new.target)return et({component:Zr,...a});Ge(t,!1);let e=G(t,"isOpen",12,!1),s=G(t,"card",12,null),n=G(t,"decks",28,()=>[]),r=G(t,"isNew",12,!1);const l=Mn();let c=$({front:"",back:"",deckId:"",cardType:"qa",difficulty:"medium",tags:""});function o(){var g;b(c,{front:"",back:"",deckId:((g=n()[0])==null?void 0:g.id)||"",cardType:"qa",difficulty:"medium",tags:""})}function d(){e(!1),o()}function f(){var M,R,B,T;if(!i(c).front.trim()||!i(c).back.trim()){alert("请填写卡片正面和反面内容");return}const g=i(c).tags.split(",").map(F=>F.trim()).filter(F=>F.length>0),y={...i(c),tags:g,id:((M=s())==null?void 0:M.id)||Date.now().toString()+Math.random().toString(36).substr(2,9),created:((R=s())==null?void 0:R.created)||new Date,modified:new Date,reviewCount:((B=s())==null?void 0:B.reviewCount)||0,lapses:((T=s())==null?void 0:T.lapses)||0};r()?l("create",{card:y}):l("update",{card:y}),d()}function h(){confirm("确定要删除这张卡片吗？")&&(l("delete",{card:s()}),d())}const _=[{value:"qa",label:"问答题"},{value:"fill",label:"填空题"},{value:"choice",label:"选择题"}],w=[{value:"easy",label:"简单"},{value:"medium",label:"中等"},{value:"hard",label:"困难"}];Oe(()=>(he(s()),he(e())),()=>{var g;s()&&e()&&b(c,{front:s().front,back:s().back,deckId:s().deckId,cardType:s().cardType,difficulty:s().difficulty,tags:((g=s().tags)==null?void 0:g.join(", "))||""})}),Ut(),St();var m=Lt(),E=Ct(m);{var D=g=>{var y=kc(),M=v(y),R=v(M),B=v(R),T=v(B,!0);u(B);var F=p(B,2),ee=v(F);Z(ee,{name:"close",size:"1rem"}),u(F),u(R);var _e=p(R,2),pe=v(_e),I=v(pe),z=p(v(I),2);Ps(z),u(I);var re=p(I,2),ie=p(v(re),2);Ps(ie),u(re);var ae=p(re,2),ve=p(v(ae),2);Q(()=>{i(c),na(()=>{n()})});var fe=v(ve);fe.value=fe.__value="";var me=p(fe);Be(me,1,n,$e,(k,U)=>{var J=wc(),$t=v(J,!0);u(J);var nt={};Q(()=>{Y($t,(i(U),x(()=>i(U).name))),nt!==(nt=(i(U),x(()=>i(U).id)))&&(J.value=(J.__value=(i(U),x(()=>i(U).id)))??"")}),O(k,J)}),u(ve),u(ae);var be=p(ae,2),Pe=v(be),ge=p(v(Pe),2);Q(()=>{i(c),na(()=>{})}),Be(ge,5,()=>_,$e,(k,U)=>{var J=_c(),$t=v(J,!0);u(J);var nt={};Q(()=>{Y($t,(i(U),x(()=>i(U).label))),nt!==(nt=(i(U),x(()=>i(U).value)))&&(J.value=(J.__value=(i(U),x(()=>i(U).value)))??"")}),O(k,J)}),u(ge),u(Pe);var H=p(Pe,2),X=p(v(H),2);Q(()=>{i(c),na(()=>{})}),Be(X,5,()=>w,$e,(k,U)=>{var J=yc(),$t=v(J,!0);u(J);var nt={};Q(()=>{Y($t,(i(U),x(()=>i(U).label))),nt!==(nt=(i(U),x(()=>i(U).value)))&&(J.value=(J.__value=(i(U),x(()=>i(U).value)))??"")}),O(k,J)}),u(X),u(H),u(be);var we=p(be,2),ke=p(v(we),2);At(ke),dt(2),u(we),u(pe),u(_e);var Ae=p(_e,2),xe=v(Ae),ze=v(xe);{var st=k=>{var U=bc();q("click",U,h),O(k,U)};W(ze,k=>{!r()&&s()&&k(st)})}u(xe);var Se=p(xe,2),N=v(Se),S=p(N,2),P=p(v(S));u(S),u(Se),u(Ae),u(M),u(y),Q(()=>{Y(T,r()?"添加卡片":"编辑卡片"),Y(P,` ${r()?"创建":"保存"}`)}),q("click",F,d),ba(z,()=>i(c).front,k=>Aa(c,i(c).front=k)),ba(ie,()=>i(c).back,k=>Aa(c,i(c).back=k)),ra(ve,()=>i(c).deckId,k=>Aa(c,i(c).deckId=k)),ra(ge,()=>i(c).cardType,k=>Aa(c,i(c).cardType=k)),ra(X,()=>i(c).difficulty,k=>Aa(c,i(c).difficulty=k)),ba(ke,()=>i(c).tags,k=>Aa(c,i(c).tags=k)),q("submit",pe,gl(f)),q("click",N,d),q("click",S,f),q("click",M,An(function(k){Pn.call(this,t,k)})),q("click",y,d),q("keydown",y,k=>k.key==="Escape"&&d()),O(g,y)};W(E,g=>{e()&&g(D)})}return O(a,m),Je({get isOpen(){return e()},set isOpen(g){e(g),K()},get card(){return s()},set card(g){s(g),K()},get decks(){return n()},set decks(g){n(g),K()},get isNew(){return r()},set isNew(g){r(g),K()},$set:at,$on:(g,y)=>tt(t,g,y)})}var Cc=V('<div id="card-management" class="anki-page active"><!> <div class="management-toolbar svelte-pfp9ws"><div class="search-box svelte-pfp9ws"><i class="fas fa-search svelte-pfp9ws"></i> <input type="text" placeholder="搜索卡片..." class="svelte-pfp9ws"/></div> <div class="toolbar-actions svelte-pfp9ws"><!></div></div> <!></div> <!>',1);function ei(a,t){if(new.target)return et({component:ei,...a});Ge(t,!1);let e=G(t,"app",12),s=G(t,"plugin",12),n=[],r=$([]),l=$([]),c=$([]),o=$(""),d=$("created"),f=$("desc"),h=$(1),_=20,w=$(!1),m=$(null),E=$(!1),D=$({deckId:"",cardType:"",difficulty:"",dateRange:"",hasReviews:"",tags:""});Ls(async()=>{await g()});async function g(){try{n=y(),b(r,M()),R()}catch(N){console.error("加载卡片数据失败:",N)}}function y(){const N=[],S=["fill","choice","qa"],P=["easy","medium","hard"];for(let k=1;k<=50;k++)N.push({id:`card-${k}`,front:`问题 ${k}：这是第 ${k} 张卡片的正面内容`,back:`答案 ${k}：这是第 ${k} 张卡片的反面内容，包含详细解释`,deckId:`deck-${k%3+1}`,cardType:S[k%3],difficulty:P[k%3],tags:[`标签${k}`,`类别${k%5+1}`],created:new Date(Date.now()-Math.random()*30*24*60*60*1e3),modified:new Date(Date.now()-Math.random()*7*24*60*60*1e3),reviewCount:Math.floor(Math.random()*10),lapses:Math.floor(Math.random()*3)});return N}function M(){return[{id:"deck-1",name:"数学基础",type:"main",stats:{newCards:10,reviewCards:5,memoryRate:.8,totalCards:15}},{id:"deck-2",name:"英语词汇",type:"main",stats:{newCards:20,reviewCards:8,memoryRate:.75,totalCards:28}},{id:"deck-3",name:"历史知识",type:"main",stats:{newCards:5,reviewCards:12,memoryRate:.9,totalCards:17}}]}function R(){let N=[...n];if(i(o).trim()){const S=i(o).toLowerCase();N=N.filter(P=>{var k;return P.front.toLowerCase().includes(S)||P.back.toLowerCase().includes(S)||((k=P.tags)==null?void 0:k.some(U=>U.toLowerCase().includes(S)))})}if(i(D).deckId&&(N=N.filter(S=>S.deckId===i(D).deckId)),i(D).cardType&&(N=N.filter(S=>S.cardType===i(D).cardType)),i(D).difficulty&&(N=N.filter(S=>S.difficulty===i(D).difficulty)),i(D).hasReviews&&(i(D).hasReviews==="reviewed"?N=N.filter(S=>(S.reviewCount||0)>0):i(D).hasReviews==="not-reviewed"&&(N=N.filter(S=>(S.reviewCount||0)===0))),i(D).tags){const S=i(D).tags.toLowerCase().split(",").map(P=>P.trim());N=N.filter(P=>{var k;return(k=P.tags)==null?void 0:k.some(U=>S.some(J=>U.toLowerCase().includes(J)))})}N.sort((S,P)=>{let k,U;switch(i(d)){case"front":k=S.front,U=P.front;break;case"back":k=S.back,U=P.back;break;case"deckId":k=B(S.deckId),U=B(P.deckId);break;case"cardType":k=S.cardType,U=P.cardType;break;case"difficulty":k=S.difficulty,U=P.difficulty;break;case"reviewCount":k=S.reviewCount||0,U=P.reviewCount||0;break;case"created":default:k=S.created,U=P.created;break}return k<U?i(f)==="asc"?-1:1:k>U?i(f)==="asc"?1:-1:0}),b(l,N),b(h,1)}function B(N){const S=i(r).find(P=>P.id===N);return(S==null?void 0:S.name)||"未知牌组"}function T(){b(m,null),b(E,!0),b(w,!0)}function F(N){const S=N.target;b(o,S.value),R()}function ee(N){b(d,N.detail.sortBy),b(f,N.detail.sortOrder),R()}function _e(N){b(D,N.detail),R()}function pe(N){const{cardId:S}=N.detail;i(c).includes(S)?b(c,i(c).filter(P=>P!==S)):b(c,[...i(c),S])}function I(N){const{selected:S,cards:P}=N.detail;S?b(c,[...new Set([...i(c),...P])]):b(c,i(c).filter(k=>!P.includes(k)))}function z(N){b(h,N.detail.page)}function re(N){b(m,N.detail.card),b(E,!1),b(w,!0)}function ie(N){const{card:S}=N.detail;confirm(`确定要删除卡片"${S.front}"吗？`)&&(n=n.filter(P=>P.id!==S.id),b(c,i(c).filter(P=>P!==S.id)),R())}function ae(N){const{card:S}=N.detail;b(m,S),b(E,!1),b(w,!0)}function ve(N){const{card:S}=N.detail;n=[...n,S],R()}function fe(N){const{card:S}=N.detail;n=n.map(P=>P.id===S.id?S:P),R()}function me(){console.log("批量编辑",i(c))}function be(){console.log("批量移动",i(c))}function Pe(){confirm(`确定要删除选中的 ${i(c).length} 张卡片吗？`)&&(n=n.filter(N=>!i(c).includes(N.id)),b(c,[]),R())}Oe(()=>(i(o),i(D)),()=>{(i(o)!==void 0||i(D))&&R()}),Ut(),St();var ge=Cc(),H=Ct(ge),X=v(H);_s(X,{title:"卡片管理",subtitle:"管理您的学习卡片，编辑内容和设置",buttonText:"添加卡片",buttonIcon:"fas fa-plus",onButtonClick:T});var we=p(X,2),ke=v(we),Ae=p(v(ke),2);At(Ae),u(ke);var xe=p(ke,2),ze=v(xe);Qr(ze,{get decks(){return i(r)},get filters(){return i(D)},set filters(N){b(D,N)},$$events:{filter:_e},$$legacy:!0}),u(xe),u(we);var st=p(we,2);Xr(st,{get cards(){return i(l)},get decks(){return i(r)},pageSize:_,get selectedCards(){return i(c)},set selectedCards(N){b(c,N)},get sortBy(){return i(d)},set sortBy(N){b(d,N)},get sortOrder(){return i(f)},set sortOrder(N){b(f,N)},get currentPage(){return i(h)},set currentPage(N){b(h,N)},$$events:{sort:ee,select:pe,selectAll:I,pageChange:z,edit:re,delete:ie,view:ae,batchEdit:me,batchMove:be,batchDelete:Pe},$$legacy:!0}),u(H);var Se=p(H,2);return Zr(Se,{get card(){return i(m)},get decks(){return i(r)},get isNew(){return i(E)},get isOpen(){return i(w)},set isOpen(N){b(w,N)},$$events:{create:ve,update:fe,delete:ie},$$legacy:!0}),ba(Ae,()=>i(o),N=>b(o,N)),q("input",Ae,F),O(a,ge),Je({get app(){return e()},set app(N){e(N),K()},get plugin(){return s()},set plugin(N){s(N),K()},$set:at,$on:(N,S)=>tt(t,N,S)})}var xc=V("<button><i></i> <span> </span></button>"),Sc=V('<div class="ai-tab-content active"><div class="file-upload-area"><div class="upload-zone svelte-1gfl2d8"><i class="fas fa-cloud-upload-alt svelte-1gfl2d8"></i> <h3>拖拽文件到此处</h3> <p>支持 PDF、Word、TXT、Markdown 等格式</p></div></div></div>'),Dc=V('<div class="ai-tab-content active"><div class="text-input-area svelte-1gfl2d8"><textarea placeholder="请输入要生成卡片的文本内容...  支持： • 学习笔记 • 课程内容 • 知识要点 • 任何需要记忆的文本" class="svelte-1gfl2d8"></textarea></div></div>'),Tc=V('<div class="ai-tab-content active"><div class="web-link-area"><div class="link-input-group svelte-1gfl2d8"><input type="url" placeholder="请输入网页链接 (https://...)" class="svelte-1gfl2d8"/> <button class="anki-btn-secondary"><i class="fas fa-download"></i> 获取内容</button></div></div></div>'),Ac=V('<div class="ai-tab-content active"><div class="ai-model-selection"><h3>选择AI模型</h3> <div class="model-options svelte-1gfl2d8"><label class="model-option svelte-1gfl2d8"><input type="radio" name="ai-model" value="gpt-4"/> <div class="model-card svelte-1gfl2d8"><h4 class="svelte-1gfl2d8">GPT-4</h4> <p class="svelte-1gfl2d8">最强大的语言模型，适合复杂内容</p></div></label> <label class="model-option svelte-1gfl2d8"><input type="radio" name="ai-model" value="gpt-3.5"/> <div class="model-card svelte-1gfl2d8"><h4 class="svelte-1gfl2d8">GPT-3.5</h4> <p class="svelte-1gfl2d8">快速高效，适合一般内容</p></div></label> <label class="model-option svelte-1gfl2d8"><input type="radio" name="ai-model" value="claude"/> <div class="model-card svelte-1gfl2d8"><h4 class="svelte-1gfl2d8">Claude</h4> <p class="svelte-1gfl2d8">擅长分析和推理，适合学术内容</p></div></label></div></div></div>'),Mc=V('<div class="generating-content svelte-1gfl2d8"><div class="loading-spinner svelte-1gfl2d8"><i class="fas fa-spinner fa-spin"></i></div> <h3 class="svelte-1gfl2d8">正在生成卡片...</h3> <p class="svelte-1gfl2d8">AI正在分析内容并生成学习卡片，请稍候</p></div>'),Nc=V('<div class="placeholder-content svelte-1gfl2d8"><i class="fas fa-robot" style="font-size: 3rem; color: var(--text-muted); margin-bottom: 1rem;"></i> <h3 class="svelte-1gfl2d8">AI助手功能</h3> <p class="svelte-1gfl2d8">选择输入方式并点击"开始生成"来创建学习卡片</p></div>'),Pc=V('<div id="ai-assistant" class="anki-page active"><!> <div class="ai-nav-tabs svelte-1gfl2d8"></div> <div class="ai-content-container svelte-1gfl2d8"><div class="ai-input-section svelte-1gfl2d8"><!></div> <div class="ai-config-section svelte-1gfl2d8"><!></div></div></div>');function ti(a,t){if(new.target)return et({component:ti,...a});Ge(t,!1);const e=$(),s=$(),n=$(),r=$();let l=G(t,"app",12),c=G(t,"plugin",12),o=$("file-list");const d=[{id:"file-list",icon:"fas fa-file-alt",label:"文件列表"},{id:"text-input",icon:"fas fa-keyboard",label:"文本输入"},{id:"web-link",icon:"fas fa-link",label:"网页链接"},{id:"ai-model",icon:"fas fa-brain",label:"AI模型"},{id:"generate",icon:"fas fa-magic",label:"开始生成",isGenerate:!0}];function f(I){I==="generate"?h():b(o,I)}async function h(){console.log("Generate cards"),le.setGenerating(!0);try{await new Promise(z=>setTimeout(z,2e3));const I=[{front:"What is machine learning?",back:"A subset of artificial intelligence that enables computers to learn and improve from experience without being explicitly programmed.",cardType:"qa",difficulty:"medium"}];le.setGeneratedCards(I)}catch(I){console.error("Card generation failed:",I),le.setError("Failed to generate cards")}finally{le.setGenerating(!1)}}function _(I){const z=I.target;le.setInputText(z.value)}function w(I){const z=I.target;le.setWebUrl(z.value)}function m(I){const z=I.target;le.setSelectedAIModel(z.value)}Oe(()=>le,()=>{b(e,le.inputText)}),Oe(()=>le,()=>{b(s,le.webUrl)}),Oe(()=>le,()=>{b(n,le.selectedAIModel)}),Oe(()=>le,()=>{b(r,le.isGenerating)}),Ut(),St();var E=Pc(),D=v(E);_s(D,{title:"AI助手",subtitle:"支持文件、文本、网页链接生成Anki卡片，按照预设规范和题型占比要求智能生成"});var g=p(D,2);Be(g,5,()=>d,$e,(I,z)=>{var re=xc(),ie=v(re),ae=p(ie,2),ve=v(ae,!0);u(ae),u(re),Q(()=>{je(re,1,`ai-tab-btn ${i(o),i(z),x(()=>i(o)===i(z).id?"active":"")??""} ${i(z),x(()=>i(z).isGenerate?"generate-btn":"")??""}`,"svelte-1gfl2d8"),Va(re,"data-tab",(i(z),x(()=>i(z).id))),je(ie,1,Vr((i(z),x(()=>i(z).icon))),"svelte-1gfl2d8"),Y(ve,(i(z),x(()=>i(z).label)))}),q("click",re,()=>f(i(z).id)),O(I,re)}),u(g);var y=p(g,2),M=v(y),R=v(M);{var B=I=>{var z=Sc();O(I,z)},T=I=>{var z=Lt(),re=Ct(z);{var ie=ve=>{var fe=Dc(),me=v(fe),be=v(me);Ps(be),u(me),u(fe),Q(()=>Gn(be,i(e))),q("input",be,_),O(ve,fe)},ae=ve=>{var fe=Lt(),me=Ct(fe);{var be=ge=>{var H=Tc(),X=v(H),we=v(X),ke=v(we);At(ke),dt(2),u(we),u(X),u(H),Q(()=>Gn(ke,i(s))),q("input",ke,w),O(ge,H)},Pe=ge=>{var H=Lt(),X=Ct(H);{var we=ke=>{var Ae=Ac(),xe=v(Ae),ze=p(v(xe),2),st=v(ze),Se=v(st);At(Se),dt(2),u(st);var N=p(st,2),S=v(N);At(S),dt(2),u(N);var P=p(N,2),k=v(P);At(k),dt(2),u(P),u(ze),u(xe),u(Ae),Q(()=>{ns(Se,i(n)==="gpt-4"),ns(S,i(n)==="gpt-3.5"),ns(k,i(n)==="claude")}),q("change",Se,m),q("change",S,m),q("change",k,m),O(ke,Ae)};W(X,ke=>{i(o)==="ai-model"&&ke(we)},!0)}O(ge,H)};W(me,ge=>{i(o)==="web-link"?ge(be):ge(Pe,!1)},!0)}O(ve,fe)};W(re,ve=>{i(o)==="text-input"?ve(ie):ve(ae,!1)},!0)}O(I,z)};W(R,I=>{i(o)==="file-list"?I(B):I(T,!1)})}u(M);var F=p(M,2),ee=v(F);{var _e=I=>{var z=Mc();O(I,z)},pe=I=>{var z=Nc();O(I,z)};W(ee,I=>{i(r)?I(_e):I(pe,!1)})}return u(F),u(y),u(E),O(a,E),Je({get app(){return l()},set app(I){l(I),K()},get plugin(){return c()},set plugin(I){c(I),K()},$set:at,$on:(I,z)=>tt(t,I,z)})}var Ec=V('<div id="statistics" class="anki-page active"><!> <div class="stats-grid svelte-1nncr1k"><div class="stats-card svelte-1nncr1k"><h3 class="svelte-1nncr1k">学习时长趋势</h3> <div class="chart-placeholder svelte-1nncr1k"><i class="fas fa-chart-line svelte-1nncr1k"></i> <p class="svelte-1nncr1k">图表区域</p></div></div> <div class="stats-card svelte-1nncr1k"><h3 class="svelte-1nncr1k">记忆保持率</h3> <div class="chart-placeholder svelte-1nncr1k"><i class="fas fa-chart-pie svelte-1nncr1k"></i> <p class="svelte-1nncr1k">图表区域</p></div></div> <div class="stats-card svelte-1nncr1k"><h3 class="svelte-1nncr1k">学习进度</h3> <div class="chart-placeholder svelte-1nncr1k"><i class="fas fa-chart-bar svelte-1nncr1k"></i> <p class="svelte-1nncr1k">图表区域</p></div></div> <div class="stats-card svelte-1nncr1k"><h3 class="svelte-1nncr1k">复习效率</h3> <div class="chart-placeholder svelte-1nncr1k"><i class="fas fa-chart-area svelte-1nncr1k"></i> <p class="svelte-1nncr1k">图表区域</p></div></div></div></div>');function ai(a,t){if(new.target)return et({component:ai,...a});Ge(t,!1);let e=G(t,"app",12),s=G(t,"plugin",12);var n=Ec(),r=v(n);return _s(r,{title:"统计分析",subtitle:"查看您的学习数据和进度分析"}),dt(2),u(n),O(a,n),Je({get app(){return e()},set app(l){e(l),K()},get plugin(){return s()},set plugin(l){s(l),K()},$set:at,$on:(l,c)=>tt(t,l,c)})}var Rc=V('<div class="anki-app svelte-dubgbw"><!> <main class="anki-main-content"><!> <!> <!> <!></main></div>');function si(a,t){if(new.target)return et({component:si,...a});Ge(t,!1);let e=G(t,"app",12),s=G(t,"plugin",12),n=$("deck-study");function r(g){b(n,g),le.setCurrentPage(g),console.log("Navigation to:",g)}Ls(()=>{console.log("Anki plugin mounted"),le.decks.length===0&&s()&&s().loadDecksFromAnki&&s().loadDecksFromAnki().catch(g=>{console.error("Failed to load decks:",g)})}),St();var l=Rc(),c=v(l);Kr(c,{get currentPage(){return i(n)},onNavigate:r});var o=p(c,2),d=v(o);{var f=g=>{Yr(g,{get app(){return e()},get plugin(){return s()}})};W(d,g=>{i(n)==="deck-study"&&g(f)})}var h=p(d,2);{var _=g=>{ei(g,{get app(){return e()},get plugin(){return s()}})};W(h,g=>{i(n)==="card-management"&&g(_)})}var w=p(h,2);{var m=g=>{ti(g,{get app(){return e()},get plugin(){return s()}})};W(w,g=>{i(n)==="ai-assistant"&&g(m)})}var E=p(w,2);{var D=g=>{ai(g,{get app(){return e()},get plugin(){return s()}})};W(E,g=>{i(n)==="statistics"&&g(D)})}return u(o),u(l),O(a,l),Je({get app(){return e()},set app(g){e(g),K()},get plugin(){return s()},set plugin(g){s(g),K()},$set:at,$on:(g,y)=>tt(t,g,y)})}const as="anki-main-view";class Ic extends A.ItemView{constructor(e){super(e);ue(this,"component")}getViewType(){return as}getDisplayText(){return"Anki Memory Assistant"}getIcon(){return"brain"}async onOpen(){this.component=new si({target:this.contentEl,props:{app:this.app,plugin:this.app.plugins.plugins.tuanki}})}async onClose(){var e;(e=this.component)==null||e.$destroy()}}class ni{constructor(t="http://localhost:8765"){ue(this,"baseUrl");ue(this,"version",6);this.baseUrl=t}async sendRequest(t,e){const s={action:t,version:this.version,params:e};try{const n=await fetch(this.baseUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)});if(!n.ok)throw new Error(`HTTP error! status: ${n.status}`);const r=await n.json();if(r.error)throw new Error(r.error);return r.result}catch(n){throw console.error("Anki Connect error:",n),n}}async testConnection(){try{return await this.sendRequest("version"),!0}catch{return!1}}async getDeckNames(){return this.sendRequest("deckNames")}async getDeckStats(t){return this.sendRequest("getDecks",{cards:[t]})}async createDeck(t){return this.sendRequest("createDeck",{deck:t})}async deleteDeck(t){return this.sendRequest("deleteDecks",{decks:[t],cardsToo:!0})}async addNote(t){return this.sendRequest("addNote",{note:t})}async addNotes(t){return this.sendRequest("addNotes",{notes:t})}async updateNoteFields(t,e){return this.sendRequest("updateNoteFields",{note:{id:t,fields:e}})}async deleteNotes(t){return this.sendRequest("deleteNotes",{notes:t})}async findNotes(t){return this.sendRequest("findNotes",{query:t})}async notesInfo(t){return this.sendRequest("notesInfo",{notes:t})}async cardsInfo(t){return this.sendRequest("cardsInfo",{cards:t})}async findCards(t){return this.sendRequest("findCards",{query:t})}async sync(){return this.sendRequest("sync")}async getModelNames(){return this.sendRequest("modelNames")}async createModel(t,e,s,n){const r=n||[{Name:"Card 1",Front:"{{Front}}",Back:"{{Back}}"}];return this.sendRequest("createModel",{modelName:t,inOrderFields:e,css:s||".card { font-family: arial; font-size: 20px; text-align: center; color: black; background-color: white; }",cardTemplates:r})}convertToAnkiDeck(t,e){return{id:t.toLowerCase().replace(/\s+/g,"-"),name:t,type:"main",stats:{newCards:(e==null?void 0:e.new_count)||0,reviewCards:(e==null?void 0:e.review_count)||0,memoryRate:(e==null?void 0:e.learn_count)||0,totalCards:(e==null?void 0:e.total_in_deck)||0}}}convertToAnkiNote(t,e,s="Basic"){return{deckName:e,modelName:s,fields:{Front:t.front,Back:t.back},tags:t.tags||[]}}}class es{static async testOpenAI(t,e){var n;const s=Date.now();try{if(!t.apiKey)return{success:!1,message:"API Key 未配置"};const r=await fetch(`${t.baseUrl}/models`,{method:"GET",headers:{Authorization:`Bearer ${t.apiKey}`,"Content-Type":"application/json"}}),l=Date.now()-s;return r.ok?{success:!0,message:((n=(await r.json()).data)==null?void 0:n.some(d=>d.id===e))?"连接成功，模型可用":"连接成功，但模型不可用",latency:l,model:e}:{success:!1,message:`HTTP ${r.status}: ${r.statusText}`,latency:l}}catch(r){return{success:!1,message:`连接失败: ${r.message}`,latency:Date.now()-s}}}static async testAnthropic(t){const e=Date.now();try{if(!t.apiKey)return{success:!1,message:"API Key 未配置"};const s=await fetch(`${t.baseUrl}/v1/messages`,{method:"POST",headers:{"x-api-key":t.apiKey,"Content-Type":"application/json","anthropic-version":"2023-06-01"},body:JSON.stringify({model:"claude-3-sonnet-20240229",max_tokens:1,messages:[{role:"user",content:"test"}]})}),n=Date.now()-e;return s.status===401?{success:!1,message:"API Key 无效",latency:n}:s.status===429?{success:!1,message:"请求频率限制",latency:n}:{success:!0,message:"连接成功",latency:n}}catch(s){return{success:!1,message:`连接失败: ${s.message}`,latency:Date.now()-e}}}static async testDeepSeek(t){var s,n;const e=Date.now();try{if(!t.apiKey)return{success:!1,message:"API Key 未配置"};const r=await fetch(`${t.baseUrl}/models`,{method:"GET",headers:{Authorization:`Bearer ${t.apiKey}`,"Content-Type":"application/json"}}),l=Date.now()-e;if(!r.ok)return r.status===401?{success:!1,message:"API Key 无效",latency:l}:{success:!1,message:`HTTP ${r.status}: ${r.statusText}`,latency:l};const c=await r.json();return{success:!0,message:"连接成功",latency:l,model:((n=(s=c.data)==null?void 0:s[0])==null?void 0:n.id)||"deepseek-chat"}}catch(r){return{success:!1,message:`连接失败: ${r.message}`,latency:Date.now()-e}}}static async testAIModel(t,e){return e.enabled?t.startsWith("gpt-")?this.testOpenAI(e,t):t.startsWith("claude-")?this.testAnthropic(e):t.startsWith("deepseek-")?this.testDeepSeek(e):{success:!1,message:"未知的模型类型"}:{success:!1,message:"模型未启用"}}static showTestResult(t,e){const s=e.latency?` (${e.latency}ms)`:"";e.success?new A.Notice(`✅ ${t}: ${e.message}${s}`):new A.Notice(`❌ ${t}: ${e.message}${s}`)}static async testAllModels(t){const e={};for(const[s,n]of Object.entries(t))n.enabled&&(e[s]=await this.testAIModel(s,n));return e}static getPresetConfigs(){return{"gpt-4":{baseUrl:"https://api.openai.com/v1",enabled:!0},"gpt-3.5-turbo":{baseUrl:"https://api.openai.com/v1",enabled:!0},"claude-3-sonnet":{baseUrl:"https://api.anthropic.com",enabled:!0},"claude-3-haiku":{baseUrl:"https://api.anthropic.com",enabled:!0},"deepseek-chat":{baseUrl:"https://api.deepseek.com/v1",enabled:!0},"deepseek-coder":{baseUrl:"https://api.deepseek.com/v1",enabled:!0}}}}class Ys{constructor(t,e){ue(this,"app");ue(this,"settings");this.app=t,this.settings=e}getAllFolders(){return this.app.vault.getAllFolders(!1).map(e=>e.path).filter(e=>e!=="")}async ensureDataFolder(){const t=A.normalizePath(this.settings.dataFolder);this.app.vault.getFolderByPath(t)||await this.app.vault.createFolder(t)}async getDataFolderStats(){await this.ensureDataFolder();const t=A.normalizePath(this.settings.dataFolder);if(!this.app.vault.getFolderByPath(t))return{totalDecks:0,totalCards:0,successfulCards:0,failedCards:0,needsFormatting:0,lastRefresh:new Date};const s=await this.scanLocalDecks();return{totalDecks:s.length,totalCards:s.reduce((n,r)=>n+r.cardCount,0),successfulCards:s.reduce((n,r)=>n+r.successCount,0),failedCards:s.reduce((n,r)=>n+r.failureCount,0),needsFormatting:s.filter(n=>n.needsFormatting).length,lastRefresh:new Date}}async scanLocalDecks(){await this.ensureDataFolder();const t=A.normalizePath(this.settings.dataFolder),e=this.app.vault.getFolderByPath(t);if(!e)return[];const s=[];for(const n of e.children)if(n instanceof A.TFile){const r=await this.analyzeDeckFile(n);r&&s.push(r)}return s}async analyzeDeckFile(t){const e=t.extension==="json",s=t.extension==="md";if(!e&&!s)return null;try{const n=await this.app.vault.read(t),r=e?await this.parseJsonDeck(n,t.basename):await this.parseMdDeck(n,t.basename);return{name:t.basename,filePath:t.path,format:e?"json":"md",cardCount:r.cards.length,successCount:r.successCount,failureCount:r.failureCount,lastModified:new Date(t.stat.mtime),needsFormatting:r.failureCount>0,parseErrors:r.errors}}catch(n){return{name:t.basename,filePath:t.path,format:e?"json":"md",cardCount:0,successCount:0,failureCount:1,lastModified:new Date(t.stat.mtime),needsFormatting:!0,parseErrors:[`文件读取失败: ${n.message}`]}}}async parseJsonDeck(t,e){const s={deckName:e,cards:[],successCount:0,failureCount:0,errors:[]};try{const n=JSON.parse(t);if(!Array.isArray(n.cards))return s.errors.push("JSON 格式错误：缺少 cards 数组"),s.failureCount=1,s;for(let r=0;r<n.cards.length;r++){const l=n.cards[r],c=this.parseCardData(l,r+1);s.cards.push(c),c.success?s.successCount++:s.failureCount++}}catch(n){s.errors.push(`JSON 解析失败: ${n.message}`),s.failureCount=1}return s}async parseMdDeck(t,e){const s={deckName:e,cards:[],successCount:0,failureCount:0,errors:[]};t.split(`
`);const n=this.settings.regexPatterns.cardSeparator,r=this.settings.regexPatterns.frontBackSeparator,l=t.split(new RegExp(n,"g"));for(let c=0;c<l.length;c++){const o=l[c].trim();if(!o)continue;const d=this.parseMdCard(o,c+1,r);s.cards.push(d),d.success?s.successCount++:s.failureCount++}return s}parseCardData(t,e){try{return!t.front||!t.back?{success:!1,error:"缺少必需字段 front 或 back",lineNumber:e}:{success:!0,card:{id:t.id||Date.now().toString()+Math.random().toString(36).substr(2,9),front:t.front,back:t.back,deckId:t.deckId||"",difficulty:t.difficulty||"medium",cardType:t.cardType||"qa",tags:t.tags||[],created:t.created?new Date(t.created):new Date,modified:t.modified?new Date(t.modified):new Date,lastReview:t.lastReview?new Date(t.lastReview):void 0,nextReview:t.nextReview?new Date(t.nextReview):void 0,interval:t.interval,easeFactor:t.easeFactor,reviewCount:t.reviewCount||0,lapses:t.lapses||0}}}catch(s){return{success:!1,error:`卡片解析失败: ${s.message}`,lineNumber:e}}}parseMdCard(t,e,s){try{const n=t.split(s);if(n.length<2)return{success:!1,error:`卡片格式错误：未找到分隔符 "${s}"`,lineNumber:e};const r=n[0].trim(),l=n[1].trim();if(!r||!l)return{success:!1,error:"卡片正面或反面内容为空",lineNumber:e};const c=new RegExp(this.settings.regexPatterns.tagPattern,"g"),o=[];let d;for(;(d=c.exec(t))!==null;)o.push(d[0]);return{success:!0,card:{id:Date.now().toString()+Math.random().toString(36).substr(2,9),front:r,back:l,deckId:"",difficulty:"medium",cardType:"qa",tags:o,created:new Date,modified:new Date,reviewCount:0,lapses:0}}}catch(n){return{success:!1,error:`Markdown 卡片解析失败: ${n.message}`,lineNumber:e}}}async saveDeckToFile(t,e){await this.ensureDataFolder();const s=this.sanitizeFileName(t.name),n=this.settings.exportFormat,r=A.normalizePath(`${this.settings.dataFolder}/${s}.${n}`);n==="json"?await this.saveDeckAsJson(r,t,e):await this.saveDeckAsMarkdown(r,t,e)}async saveDeckAsJson(t,e,s){const n={deck:{id:e.id,name:e.name,type:e.type,stats:e.stats,created:new Date().toISOString(),modified:new Date().toISOString()},cards:s.map(l=>{var c,o;return{...l,created:l.created.toISOString(),modified:l.modified.toISOString(),lastReview:(c=l.lastReview)==null?void 0:c.toISOString(),nextReview:(o=l.nextReview)==null?void 0:o.toISOString()}})},r=JSON.stringify(n,null,2);await this.app.vault.adapter.write(t,r)}async saveDeckAsMarkdown(t,e,s){const n=this.settings.regexPatterns.frontBackSeparator,r=this.settings.regexPatterns.cardSeparator;let l=`# ${e.name}

`;l+=`> 牌组统计：${e.stats.totalCards||s.length} 张卡片
`,l+=`> 创建时间：${new Date().toLocaleString()}

`;const c=s.map(o=>{let d=`${o.front}${n}${o.back}`;return o.tags&&o.tags.length>0&&(d+=`

标签：${o.tags.join(" ")}`),d});l+=c.join(`

${r}

`),await this.app.vault.adapter.write(t,l)}async loadDeckFromFile(t){try{const e=this.app.vault.getFileByPath(t);if(!e)return null;const s=await this.app.vault.read(e);return e.extension==="json"?await this.loadJsonDeck(s,e.basename):await this.loadMdDeck(s,e.basename)}catch(e){return console.error("加载牌组文件失败:",e),null}}async loadJsonDeck(t,e){var s,n,r,l,c;try{const o=JSON.parse(t),d={id:((s=o.deck)==null?void 0:s.id)||Date.now().toString(),name:((n=o.deck)==null?void 0:n.name)||e,type:((r=o.deck)==null?void 0:r.type)||"main",stats:((l=o.deck)==null?void 0:l.stats)||{newCards:0,reviewCards:0,memoryRate:0,totalCards:((c=o.cards)==null?void 0:c.length)||0}},f=(o.cards||[]).map(h=>({...h,created:new Date(h.created),modified:new Date(h.modified),lastReview:h.lastReview?new Date(h.lastReview):void 0,nextReview:h.nextReview?new Date(h.nextReview):void 0,deckId:d.id}));return{deck:d,cards:f}}catch(o){return console.error("JSON 牌组解析失败:",o),null}}async loadMdDeck(t,e){try{const s=await this.parseMdDeck(t,e),n={id:Date.now().toString(),name:e,type:"main",stats:{newCards:s.successCount,reviewCards:0,memoryRate:0,totalCards:s.successCount}},r=s.cards.filter(l=>l.success&&l.card).map(l=>({...l.card,deckId:n.id}));return{deck:n,cards:r}}catch(s){return console.error("Markdown 牌组解析失败:",s),null}}async cleanupDeckFile(t){const e={cleaned:0,errors:[]};try{const s=await this.loadDeckFromFile(t);if(!s)return e.errors.push("无法加载牌组文件"),e;const{deck:n,cards:r}=s,l=r.filter(c=>c.front&&c.back);e.cleaned=r.length-l.length,e.cleaned>0&&await this.saveDeckToFile(n,l)}catch(s){e.errors.push(`清理失败: ${s.message}`)}return e}sanitizeFileName(t){return t.replace(/[<>:"/\\|?*]/g,"_").trim()}async deleteDeckFile(t){const e=this.app.vault.getFileByPath(t);e&&await this.app.vault.delete(e)}async exportDeck(t,e,s){const n=this.sanitizeFileName(t.name),r=A.normalizePath(`${this.settings.dataFolder}/${n}.${s}`);return s==="json"?await this.saveDeckAsJson(r,t,e):await this.saveDeckAsMarkdown(r,t,e),r}async importAllDecks(){const t={decks:[],cards:[],errors:[]};try{const e=await this.scanLocalDecks();for(const s of e)try{const n=await this.loadDeckFromFile(s.filePath);n?(t.decks.push(n.deck),t.cards.push(...n.cards)):t.errors.push(`无法加载牌组: ${s.name}`)}catch(n){t.errors.push(`导入牌组 ${s.name} 失败: ${n.message}`)}}catch(e){t.errors.push(`批量导入失败: ${e.message}`)}return t}}class zc extends A.PluginSettingTab{constructor(e,s){super(e,s);ue(this,"plugin");ue(this,"currentTab","basic");ue(this,"dataManager");ue(this,"dataStats",null);ue(this,"localDecks",[]);this.plugin=s,this.dataManager=new Ys(e,s.settings)}display(){const{containerEl:e}=this;e.empty(),e.addClass("anki-plugin-settings"),this.createNavigation(e);const s=e.createDiv("anki-settings-content");this.displayTabContent(s)}createNavigation(e){const s=e.createDiv("anki-settings-nav");[{id:"basic",name:"基本信息",icon:"info"},{id:"anki-sync",name:"Anki同步",icon:"sync"},{id:"regex",name:"正则表达式",icon:"code"},{id:"ai-assistant",name:"AI助手",icon:"brain"},{id:"data-backup",name:"数据管理与备份",icon:"database"},{id:"about",name:"关于",icon:"help-circle"}].forEach(r=>{const l=s.createDiv("anki-settings-tab");r.id===this.currentTab&&l.addClass("active"),l.createSpan("anki-settings-tab-icon").innerHTML=`<i class="lucide-${r.icon}"></i>`,l.createSpan("anki-settings-tab-name").textContent=r.name,l.addEventListener("click",()=>{s.querySelectorAll(".anki-settings-tab").forEach(c=>c.removeClass("active")),l.addClass("active"),this.currentTab=r.id,this.display()})})}displayTabContent(e){switch(this.currentTab){case"basic":this.displayBasicInfo(e);break;case"anki-sync":this.displayAnkiSync(e);break;case"regex":this.displayRegexSettings(e);break;case"ai-assistant":this.displayAIAssistant(e);break;case"data-backup":this.displayDataBackup(e);break;case"about":this.displayAbout(e);break}}displayBasicInfo(e){e.createEl("h2",{text:"基本信息"}),new A.Setting(e).setName("默认牌组").setDesc("新创建卡片的默认目标牌组").addText(s=>s.setPlaceholder("Default").setValue(this.plugin.settings.defaultDeck).onChange(async n=>{this.plugin.settings.defaultDeck=n,await this.plugin.saveSettings()})),new A.Setting(e).setName("主题").setDesc("选择插件界面主题").addDropdown(s=>s.addOption("dark","深色").addOption("light","浅色").addOption("auto","跟随系统").setValue(this.plugin.settings.theme).onChange(async n=>{this.plugin.settings.theme=n,await this.plugin.saveSettings()})),new A.Setting(e).setName("学习提醒").setDesc("启用学习提醒功能").addToggle(s=>s.setValue(this.plugin.settings.studyReminders).onChange(async n=>{this.plugin.settings.studyReminders=n,await this.plugin.saveSettings()})),new A.Setting(e).setName("每次学习最大卡片数").setDesc("单次学习会话的最大卡片数量").addSlider(s=>s.setLimits(5,100,5).setValue(this.plugin.settings.maxCardsPerSession).setDynamicTooltip().onChange(async n=>{this.plugin.settings.maxCardsPerSession=n,await this.plugin.saveSettings()}))}displayAnkiSync(e){e.createEl("h2",{text:"Anki 同步设置"}),new A.Setting(e).setName("主机地址").setDesc("Anki Connect 服务器地址").addText(s=>s.setPlaceholder("localhost").setValue(this.plugin.settings.ankiConnectHost).onChange(async n=>{this.plugin.settings.ankiConnectHost=n,await this.plugin.saveSettings()})),new A.Setting(e).setName("端口").setDesc("Anki Connect 服务器端口").addText(s=>s.setPlaceholder("8765").setValue(this.plugin.settings.ankiConnectPort.toString()).onChange(async n=>{const r=parseInt(n);!isNaN(r)&&r>0&&r<=65535&&(this.plugin.settings.ankiConnectPort=r,await this.plugin.saveSettings())})),new A.Setting(e).setName("测试连接").setDesc("测试与 Anki Connect 的连接").addButton(s=>s.setButtonText("测试连接").setCta().onClick(async()=>{await this.testAnkiConnection()})),new A.Setting(e).setName("自动同步").setDesc("自动与 Anki 同步新创建的卡片").addToggle(s=>s.setValue(this.plugin.settings.autoSync).onChange(async n=>{this.plugin.settings.autoSync=n,await this.plugin.saveSettings()}))}async testAnkiConnection(){try{const e=`http://${this.plugin.settings.ankiConnectHost}:${this.plugin.settings.ankiConnectPort}`;await new ni(e).testConnection()?new A.Notice("✅ Anki Connect 连接成功！"):new A.Notice("❌ 无法连接到 Anki Connect，请检查 Anki 是否运行且 AnkiConnect 插件已安装")}catch(e){new A.Notice("❌ 连接测试失败："+e.message)}}displayRegexSettings(e){e.createEl("h2",{text:"正则表达式设置"}),new A.Setting(e).setName("卡片分隔符").setDesc("用于分隔多个卡片的正则表达式").addText(n=>n.setPlaceholder("---").setValue(this.plugin.settings.regexPatterns.cardSeparator).onChange(async r=>{this.plugin.settings.regexPatterns.cardSeparator=r,await this.plugin.saveSettings()})),new A.Setting(e).setName("正反面分隔符").setDesc("用于分隔卡片正面和反面的正则表达式").addText(n=>n.setPlaceholder("::").setValue(this.plugin.settings.regexPatterns.frontBackSeparator).onChange(async r=>{this.plugin.settings.regexPatterns.frontBackSeparator=r,await this.plugin.saveSettings()})),new A.Setting(e).setName("标签模式").setDesc("用于识别标签的正则表达式").addText(n=>n.setPlaceholder("#[\\w-]+").setValue(this.plugin.settings.regexPatterns.tagPattern).onChange(async r=>{this.plugin.settings.regexPatterns.tagPattern=r,await this.plugin.saveSettings()})),e.createEl("h3",{text:"自定义模式"});const s=e.createDiv("custom-patterns");this.displayCustomPatterns(s),new A.Setting(e).setName("添加自定义模式").setDesc("添加新的自定义正则表达式模式").addButton(n=>n.setButtonText("添加模式").onClick(()=>{this.plugin.settings.regexPatterns.customPatterns.push({name:"新模式",pattern:"",description:""}),this.plugin.saveSettings(),this.displayCustomPatterns(s)}))}displayCustomPatterns(e){e.empty(),this.plugin.settings.regexPatterns.customPatterns.forEach((s,n)=>{const r=e.createDiv("custom-pattern");new A.Setting(r).setName(`模式 ${n+1}`).addText(l=>l.setPlaceholder("模式名称").setValue(s.name).onChange(async c=>{this.plugin.settings.regexPatterns.customPatterns[n].name=c,await this.plugin.saveSettings()})).addText(l=>l.setPlaceholder("正则表达式").setValue(s.pattern).onChange(async c=>{this.plugin.settings.regexPatterns.customPatterns[n].pattern=c,await this.plugin.saveSettings()})).addButton(l=>l.setButtonText("删除").setWarning().onClick(async()=>{this.plugin.settings.regexPatterns.customPatterns.splice(n,1),await this.plugin.saveSettings(),this.displayCustomPatterns(e)}))})}displayAIAssistant(e){e.createEl("h2",{text:"AI 助手设置"}),new A.Setting(e).setName("默认 AI 模型").setDesc("选择默认使用的 AI 模型").addDropdown(s=>{Object.keys(this.plugin.settings.aiModels).forEach(n=>{s.addOption(n,n)}),s.setValue(this.plugin.settings.aiModel).onChange(async n=>{this.plugin.settings.aiModel=n,await this.plugin.saveSettings()})}),new A.Setting(e).setName("应用预设配置").setDesc("应用推荐的 AI 模型预设配置（不会覆盖已有的 API Key）").addButton(s=>s.setButtonText("应用预设").onClick(async()=>{await this.applyPresetConfigs()})),e.createEl("h3",{text:"AI 模型配置"}),Object.entries(this.plugin.settings.aiModels).forEach(([s,n])=>{const r=e.createDiv("ai-model-section");r.createEl("h4",{text:s}),new A.Setting(r).setName("启用").setDesc(`启用 ${s} 模型`).addToggle(l=>l.setValue(n.enabled).onChange(async c=>{this.plugin.settings.aiModels[s].enabled=c,await this.plugin.saveSettings()})),new A.Setting(r).setName("API Key").setDesc(`${s} 的 API 密钥`).addText(l=>l.setPlaceholder("输入 API Key").setValue(n.apiKey).onChange(async c=>{this.plugin.settings.aiModels[s].apiKey=c,await this.plugin.saveSettings()})),n.baseUrl&&new A.Setting(r).setName("Base URL").setDesc(`${s} 的 API 基础地址`).addText(l=>l.setPlaceholder("API 基础地址").setValue(n.baseUrl).onChange(async c=>{this.plugin.settings.aiModels[s].baseUrl=c,await this.plugin.saveSettings()})),new A.Setting(r).setName("测试连接").setDesc(`测试 ${s} 的连接`).addButton(l=>l.setButtonText("测试连接").setCta().onClick(async()=>{await this.testAIConnection(s)}))}),new A.Setting(e).setName("批量测试所有模型").setDesc("测试所有启用的 AI 模型连接").addButton(s=>s.setButtonText("批量测试").onClick(async()=>{await this.testAllAIConnections()})),e.createEl("h3",{text:"题型比例设置"}),new A.Setting(e).setName("填空题比例").setDesc("生成填空题的比例 (%)").addSlider(s=>s.setLimits(0,100,5).setValue(this.plugin.settings.questionTypeRatios.fill).setDynamicTooltip().onChange(async n=>{this.plugin.settings.questionTypeRatios.fill=n,await this.plugin.saveSettings()})),new A.Setting(e).setName("选择题比例").setDesc("生成选择题的比例 (%)").addSlider(s=>s.setLimits(0,100,5).setValue(this.plugin.settings.questionTypeRatios.choice).setDynamicTooltip().onChange(async n=>{this.plugin.settings.questionTypeRatios.choice=n,await this.plugin.saveSettings()})),new A.Setting(e).setName("问答题比例").setDesc("生成问答题的比例 (%)").addSlider(s=>s.setLimits(0,100,5).setValue(this.plugin.settings.questionTypeRatios.qa).setDynamicTooltip().onChange(async n=>{this.plugin.settings.questionTypeRatios.qa=n,await this.plugin.saveSettings()}))}async testAIConnection(e){try{const s=this.plugin.settings.aiModels[e];if(!s.apiKey){new A.Notice("❌ 请先配置 API Key");return}new A.Notice("🔄 正在测试连接...");const n=await es.testAIModel(e,s);es.showTestResult(e,n)}catch(s){new A.Notice(`❌ ${e} 连接测试失败：`+s.message)}}async testAllAIConnections(){try{new A.Notice("🔄 正在批量测试所有 AI 模型连接...");const e=await es.testAllModels(this.plugin.settings.aiModels);let s=0,n=0;for(const[r,l]of Object.entries(e))n++,l.success&&s++,es.showTestResult(r,l);new A.Notice(`📊 批量测试完成：${s}/${n} 个模型连接成功`)}catch(e){new A.Notice("❌ 批量测试失败："+e.message)}}async applyPresetConfigs(){try{const e=es.getPresetConfigs();let s=0;for(const[n,r]of Object.entries(e))if(!this.plugin.settings.aiModels[n])this.plugin.settings.aiModels[n]={apiKey:"",baseUrl:r.baseUrl||"",enabled:r.enabled||!1},s++;else{const l=this.plugin.settings.aiModels[n];r.baseUrl&&l.baseUrl!==r.baseUrl&&(l.baseUrl=r.baseUrl,s++),r.enabled!==void 0&&l.enabled!==r.enabled&&(l.enabled=r.enabled,s++)}await this.plugin.saveSettings(),this.display(),new A.Notice(`✅ 预设配置已应用，更新了 ${s} 项配置`)}catch(e){new A.Notice("❌ 应用预设配置失败："+e.message)}}displayDataBackup(e){e.createEl("h2",{text:"数据管理与备份"}),e.createEl("h3",{text:"专属文件夹设置"}),new A.Setting(e).setName("数据文件夹").setDesc("选择用于保存插件卡片数据的文件夹").addDropdown(n=>{n.addOption(this.plugin.settings.dataFolder,this.plugin.settings.dataFolder),this.dataManager.getAllFolders().forEach(l=>{l!==this.plugin.settings.dataFolder&&n.addOption(l,l)}),n.addOption("__new__","新建文件夹..."),n.setValue(this.plugin.settings.dataFolder).onChange(async l=>{l==="__new__"?await this.createNewDataFolder():(this.plugin.settings.dataFolder=l,await this.plugin.saveSettings(),this.dataManager=new Ys(this.app,this.plugin.settings),await this.refreshDataStats())})}),new A.Setting(e).setName("导出格式").setDesc("选择卡片数据的默认导出格式").addDropdown(n=>n.addOption("json","JSON 格式").addOption("md","Markdown 格式").setValue(this.plugin.settings.exportFormat).onChange(async r=>{this.plugin.settings.exportFormat=r,await this.plugin.saveSettings()})),new A.Setting(e).setName("自动刷新").setDesc("自动刷新本地卡片数据解析").addToggle(n=>n.setValue(this.plugin.settings.autoRefresh).onChange(async r=>{this.plugin.settings.autoRefresh=r,await this.plugin.saveSettings()})),e.createEl("h3",{text:"数据统计"});const s=e.createDiv("data-stats-container");this.displayDataStats(s),new A.Setting(e).setName("刷新数据统计").setDesc("手动刷新本地卡片数据统计信息").addButton(n=>n.setButtonText("刷新统计").onClick(async()=>{await this.refreshDataStats(),this.displayDataStats(s)})),e.createEl("h3",{text:"数据管理操作"}),new A.Setting(e).setName("导入所有牌组").setDesc("从专属文件夹导入所有牌组数据").addButton(n=>n.setButtonText("导入牌组").onClick(async()=>{await this.importAllDecks()})),new A.Setting(e).setName("清理数据").setDesc("清理专属文件夹中的无效卡片数据").addButton(n=>n.setButtonText("清理数据").onClick(async()=>{await this.cleanupAllDecks()})),e.createEl("h3",{text:"设置管理"}),new A.Setting(e).setName("导出设置").setDesc("导出当前插件设置到文件").addButton(n=>n.setButtonText("导出设置").onClick(async()=>{await this.exportSettings()})),new A.Setting(e).setName("导入设置").setDesc("从文件导入插件设置").addButton(n=>n.setButtonText("导入设置").onClick(async()=>{await this.importSettings()})),new A.Setting(e).setName("重置设置").setDesc("将所有设置重置为默认值").addButton(n=>n.setButtonText("重置设置").setWarning().onClick(async()=>{await this.resetSettings()})),new A.Setting(e).setName("清除缓存").setDesc("清除插件缓存数据").addButton(n=>n.setButtonText("清除缓存").onClick(async()=>{await this.clearCache()}))}async exportSettings(){try{const e=JSON.stringify(this.plugin.settings,null,2),s=new Blob([e],{type:"application/json"}),n=URL.createObjectURL(s),r=document.createElement("a");r.href=n,r.download="anki-plugin-settings.json",r.click(),URL.revokeObjectURL(n),new A.Notice("✅ 设置导出成功！")}catch(e){new A.Notice("❌ 设置导出失败："+e.message)}}async importSettings(){try{const e=document.createElement("input");e.type="file",e.accept=".json",e.onchange=async s=>{var c;const n=(c=s.target.files)==null?void 0:c[0];if(!n)return;const r=await n.text(),l=JSON.parse(r);this.validateSettings(l)?(this.plugin.settings={...this.plugin.settings,...l},await this.plugin.saveSettings(),this.display(),new A.Notice("✅ 设置导入成功！")):new A.Notice("❌ 设置文件格式无效")},e.click()}catch(e){new A.Notice("❌ 设置导入失败："+e.message)}}validateSettings(e){return e&&typeof e=="object"}async resetSettings(){if(confirm("确定要重置所有设置吗？此操作不可撤销。")){const e={ankiConnectHost:"localhost",ankiConnectPort:8765,defaultDeck:"Default",autoSync:!1,aiModel:"gpt-4",aiModels:{"gpt-4":{apiKey:"",baseUrl:"https://api.openai.com/v1",enabled:!0},"gpt-3.5-turbo":{apiKey:"",baseUrl:"https://api.openai.com/v1",enabled:!0},"claude-3-sonnet":{apiKey:"",baseUrl:"https://api.anthropic.com",enabled:!0},"deepseek-chat":{apiKey:"",baseUrl:"https://api.deepseek.com/v1",enabled:!0}},questionTypeRatios:{fill:30,choice:40,qa:30},regexPatterns:{cardSeparator:"---",frontBackSeparator:"::",tagPattern:"#[\\w-]+",customPatterns:[]},studyReminders:!0,maxCardsPerSession:20,theme:"dark"};this.plugin.settings=e,await this.plugin.saveSettings(),this.display(),new A.Notice("✅ 设置已重置为默认值")}}async clearCache(){try{new A.Notice("✅ 缓存已清除")}catch(e){new A.Notice("❌ 清除缓存失败："+e.message)}}async createNewDataFolder(){const e=prompt("请输入新文件夹名称：","AnkiCards");if(e)try{await this.app.vault.createFolder(e),this.plugin.settings.dataFolder=e,await this.plugin.saveSettings(),this.dataManager=new Ys(this.app,this.plugin.settings),await this.refreshDataStats(),this.display(),new A.Notice(`✅ 文件夹 "${e}" 创建成功`)}catch(s){new A.Notice(`❌ 创建文件夹失败：${s.message}`)}}async refreshDataStats(){try{this.dataStats=await this.dataManager.getDataFolderStats(),this.localDecks=await this.dataManager.scanLocalDecks()}catch(e){new A.Notice(`❌ 刷新数据统计失败：${e.message}`)}}displayDataStats(e){if(e.empty(),!this.dataStats){e.createEl("p",{text:"正在加载数据统计..."}),this.refreshDataStats().then(()=>{this.displayDataStats(e)});return}const s=e.createDiv("data-stats-grid");if([{label:"牌组总数",value:this.dataStats.totalDecks,icon:"📚"},{label:"卡片总数",value:this.dataStats.totalCards,icon:"🃏"},{label:"解析成功",value:this.dataStats.successfulCards,icon:"✅"},{label:"解析失败",value:this.dataStats.failedCards,icon:"❌"},{label:"需要格式化",value:this.dataStats.needsFormatting,icon:"🔧"}].forEach(r=>{const l=s.createDiv("stat-card");l.createSpan("stat-icon").textContent=r.icon,l.createSpan("stat-value").textContent=r.value.toString(),l.createSpan("stat-label").textContent=r.label}),e.createEl("p",{text:`最后刷新：${this.dataStats.lastRefresh.toLocaleString()}`,cls:"last-refresh-time"}),this.localDecks.length>0){e.createEl("h4",{text:"牌组详情"});const r=e.createDiv("deck-list");this.localDecks.forEach(l=>{const c=r.createDiv("deck-item"),o=c.createDiv("deck-header");o.createSpan("deck-name").textContent=l.name,o.createSpan("deck-format").textContent=l.format.toUpperCase();const d=c.createDiv("deck-stats");if(d.createSpan("deck-stat").textContent=`${l.cardCount} 张卡片`,d.createSpan("deck-stat").textContent=`成功: ${l.successCount}`,d.createSpan("deck-stat").textContent=`失败: ${l.failureCount}`,l.needsFormatting){const w=c.createDiv("deck-warning");if(w.textContent="⚠️ 需要格式处理",l.parseErrors.length>0){const m=c.createDiv("error-list");l.parseErrors.forEach(E=>{m.createEl("div",{text:`• ${E}`,cls:"error-item"})})}}const f=c.createDiv("deck-actions"),h=f.createEl("button",{text:"清理",cls:"mod-cta"});h.onclick=async()=>{await this.cleanupDeck(l.filePath)};const _=f.createEl("button",{text:"删除",cls:"mod-warning"});_.onclick=async()=>{await this.deleteDeck(l.filePath,l.name)}})}}async importAllDecks(){try{new A.Notice("🔄 正在导入所有牌组...");const e=await this.dataManager.importAllDecks();e.errors.length>0?(new A.Notice(`⚠️ 导入完成，但有 ${e.errors.length} 个错误`),console.warn("导入错误:",e.errors)):new A.Notice(`✅ 成功导入 ${e.decks.length} 个牌组，${e.cards.length} 张卡片`),await this.refreshDataStats(),this.display()}catch(e){new A.Notice(`❌ 导入失败：${e.message}`)}}async cleanupAllDecks(){try{if(!confirm("确定要清理所有牌组中的无效数据吗？此操作不可撤销。"))return;new A.Notice("🔄 正在清理数据...");let e=0;const s=[];for(const n of this.localDecks)if(n.needsFormatting)try{const r=await this.dataManager.cleanupDeckFile(n.filePath);e+=r.cleaned,s.push(...r.errors)}catch(r){s.push(`清理 ${n.name} 失败: ${r.message}`)}s.length>0?(new A.Notice(`⚠️ 清理完成，清理了 ${e} 张无效卡片，但有 ${s.length} 个错误`),console.warn("清理错误:",s)):new A.Notice(`✅ 清理完成，共清理了 ${e} 张无效卡片`),await this.refreshDataStats(),this.display()}catch(e){new A.Notice(`❌ 清理失败：${e.message}`)}}async cleanupDeck(e){try{new A.Notice("🔄 正在清理牌组...");const s=await this.dataManager.cleanupDeckFile(e);s.errors.length>0?new A.Notice(`⚠️ 清理完成，但有错误：${s.errors.join(", ")}`):new A.Notice(`✅ 清理完成，清理了 ${s.cleaned} 张无效卡片`),await this.refreshDataStats(),this.display()}catch(s){new A.Notice(`❌ 清理失败：${s.message}`)}}async deleteDeck(e,s){try{if(!confirm(`确定要删除牌组 "${s}" 吗？此操作不可撤销。`))return;await this.dataManager.deleteDeckFile(e),new A.Notice(`✅ 牌组 "${s}" 已删除`),await this.refreshDataStats(),this.display()}catch(n){new A.Notice(`❌ 删除失败：${n.message}`)}}displayAbout(e){e.createEl("h2",{text:"关于"});const s=e.createDiv("about-section");s.createEl("h3",{text:"Anki Memory Assistant"}),s.createEl("p",{text:"一个强大的 Obsidian 插件，帮助您将笔记转换为 Anki 卡片，提升学习效率。"}),s.createEl("h4",{text:"版本信息"}),s.createEl("p",{text:"版本：1.0.0"}),s.createEl("p",{text:"作者：Anki Plugin Team"}),s.createEl("h4",{text:"功能特性"});const n=s.createEl("ul");n.createEl("li",{text:"智能卡片生成：使用 AI 技术自动生成高质量的学习卡片"}),n.createEl("li",{text:"多种题型支持：填空题、选择题、问答题"}),n.createEl("li",{text:"灵活的输入方式：文件、文本、网页链接"}),n.createEl("li",{text:"正则表达式支持：自定义卡片解析规则"}),n.createEl("li",{text:"多 AI 模型支持：OpenAI、Anthropic、DeepSeek"}),s.createEl("h4",{text:"支持与反馈"}),s.createEl("p",{text:"如果您遇到问题或有建议，请通过以下方式联系我们："});const r=s.createEl("ul");r.createEl("li").innerHTML='<a href="https://github.com/your-repo/anki-plugin">GitHub 仓库</a>',r.createEl("li").innerHTML='<a href="mailto:support@example.com">邮件支持</a>',s.createEl("h4",{text:"许可证"}),s.createEl("p",{text:"本插件基于 MIT 许可证开源。"})}}const Lc={ankiConnectHost:"localhost",ankiConnectPort:8765,defaultDeck:"Default",autoSync:!1,aiModel:"gpt-4",aiModels:{"gpt-4":{apiKey:"",baseUrl:"https://api.openai.com/v1",enabled:!0},"gpt-3.5-turbo":{apiKey:"",baseUrl:"https://api.openai.com/v1",enabled:!0},"claude-3-sonnet":{apiKey:"",baseUrl:"https://api.anthropic.com",enabled:!0},"deepseek-chat":{apiKey:"",baseUrl:"https://api.deepseek.com/v1",enabled:!0}},questionTypeRatios:{fill:30,choice:40,qa:30},regexPatterns:{cardSeparator:"---",frontBackSeparator:"::",tagPattern:"#[\\w-]+",customPatterns:[]},dataFolder:"AnkiCards",autoRefresh:!0,exportFormat:"json",studyReminders:!0,maxCardsPerSession:20,theme:"dark"};class Fc extends A.Plugin{constructor(){super(...arguments);ue(this,"settings");ue(this,"ankiConnect")}async loadSettings(){this.settings=Object.assign({},Lc,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async onload(){await this.loadSettings();const e=`http://${this.settings.ankiConnectHost}:${this.settings.ankiConnectPort}`;this.ankiConnect=new ni(e),le.setSettings(this.settings),this.registerView(as,s=>new Ic(s)),this.addSettingTab(new zc(this.app,this)),this.addRibbonIcon("brain","Open Anki Plugin",()=>{this.activateView(as)}),this.addCommand({id:"open-anki-main",name:"Open Anki Plugin",callback:()=>{this.activateView(as)}}),this.addCommand({id:"create-anki-card",name:"Create Anki Card from Selection",callback:()=>{this.createCardFromSelection()}}),this.testAnkiConnection()}onunload(){console.log("Unloading Anki plugin")}async activateView(e){this.app.workspace.detachLeavesOfType(e),await this.app.workspace.getRightLeaf(!1).setViewState({type:e,active:!0}),this.app.workspace.revealLeaf(this.app.workspace.getLeavesOfType(e)[0])}async createCardFromSelection(){const e=this.app.workspace.getActiveViewOfType(A.MarkdownView);if(!e){new A.Notice("No active markdown view");return}const s=e.editor.getSelection();if(!s){new A.Notice("No text selected");return}await this.activateView(as),le.setInputText(s),le.setCurrentPage("ai-assistant"),new A.Notice("Selected text loaded in AI Assistant")}async testAnkiConnection(){try{await this.ankiConnect.testConnection()?(console.log("Anki Connect connection successful"),await this.loadDecksFromAnki()):(console.warn("Anki Connect not available - using sample data"),this.loadSampleData())}catch(e){console.error("Failed to connect to Anki:",e),console.warn("Using sample data for demonstration"),this.loadSampleData()}}async loadDecksFromAnki(){try{le.setLoading(!0);const e=await this.ankiConnect.getDeckNames(),s=await Promise.all(e.map(async n=>{try{const r=await this.ankiConnect.getDeckStats(n);return this.ankiConnect.convertToAnkiDeck(n,r)}catch(r){return console.error(`Failed to load stats for deck ${n}:`,r),this.ankiConnect.convertToAnkiDeck(n,{})}}));le.setDecks(s)}catch(e){console.error("Failed to load decks:",e),le.setError("Failed to load decks from Anki")}finally{le.setLoading(!1)}}loadSampleData(){const e=[{id:"english-vocab",name:"英语词汇",type:"main",stats:{newCards:25,reviewCards:8,memoryRate:12}},{id:"japanese-grammar",name:"日语语法",type:"main",stats:{newCards:8,reviewCards:15,memoryRate:23}},{id:"computer-science",name:"计算机科学",type:"main",stats:{newCards:1,reviewCards:2,memoryRate:7}}];le.setDecks(e),console.log("Sample data loaded")}}module.exports=Fc;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
